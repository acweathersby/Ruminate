let fn = {}; const 
/************** Maps **************/

    /* Symbols To Inject into the Lexer */
    symbols = ["&&","||"],

    /* Goto lookup maps */
    gt0 = [0,-1,1,2,7,3,9,17,4,-6,23,-1,5,-16,10,8,11,-1,13,12,-2,15],
gt1 = [0,-6,17,29,-6,23,-1,30],
gt2 = [0,-14,23,-1,31],
gt3 = [0,-3,32,-1,9,-27,10,33,11,-1,13,12,-2,15],
gt4 = [0,-5,35,-27,10,34,11,-1,13,12,-2,15],
gt5 = [0,-35,37,-1,13,12,-2,15],
gt6 = [0,-36,38,-2,39,41,40],
gt7 = [0,-9,44,45,46,-1,47,-3,54,63,59,66,60,69,61,62,-7,53,10,58,11,-1,13,12,-2,15],
gt8 = [0,-15,76,-1,77,63,59,66,60,69,61,62],
gt9 = [0,-14,23,-1,83],
gt10 = [0,-5,35,-27,10,84,11,-1,13,12,-2,15],
gt11 = [0,-39,85,41,40],
gt12 = [0,-41,86],
gt13 = [0,-13,95,-3,54,63,59,66,60,69,61,62,-7,53,10,58,11,-1,13,12,-2,15],
gt14 = [0,-13,96,-3,54,63,59,66,60,69,61,62,-7,53,10,58,11,-1,13,12,-2,15],
gt15 = [0,-13,97,-3,54,63,59,66,60,69,61,62,-7,53,10,58,11,-1,13,12,-2,15],
gt16 = [0,-13,98,-3,54,63,59,66,60,69,61,62,-7,53,10,58,11,-1,13,12,-2,15],
gt17 = [0,-8,99,100,45,46,-1,47,-3,54,63,59,66,60,69,61,62,-7,53,10,58,11,-1,13,12,-2,15],
gt18 = [0,-33,10,101,11,-1,13,12,-2,15],
gt19 = [0,-33,10,102,11,-1,13,12,-2,15],
gt20 = [0,-33,10,103,11,-1,13,12,-2,15],
gt21 = [0,-25,106,-2,104,113,114,105],
gt22 = [0,-25,106,-2,125,113,114,126],
gt23 = [0,-25,106,-2,127,113,114,128],
gt24 = [0,-33,10,130,11,-1,13,12,-2,15],
gt25 = [0,-9,131,45,46,-1,47,-3,54,63,59,66,60,69,61,62,-7,53,10,58,11,-1,13,12,-2,15],
gt26 = [0,-9,132,45,46,-1,47,-3,54,63,59,66,60,69,61,62,-7,53,10,58,11,-1,13,12,-2,15],
gt27 = [0,-9,133,45,46,-1,47,-3,54,63,59,66,60,69,61,62,-7,53,10,58,11,-1,13,12,-2,15],
gt28 = [0,-9,134,45,46,-1,47,-3,54,63,59,66,60,69,61,62,-7,53,10,58,11,-1,13,12,-2,15],
gt29 = [0,-10,135,46,-1,47,-3,54,63,59,66,60,69,61,62,-7,53,10,58,11,-1,13,12,-2,15],
gt30 = [0,-10,136,46,-1,47,-3,54,63,59,66,60,69,61,62,-7,53,10,58,11,-1,13,12,-2,15],
gt31 = [0,-10,137,46,-1,47,-3,54,63,59,66,60,69,61,62,-7,53,10,58,11,-1,13,12,-2,15],
gt32 = [0,-10,138,46,-1,47,-3,54,63,59,66,60,69,61,62,-7,53,10,58,11,-1,13,12,-2,15],
gt33 = [0,-12,140,-12,106,-2,141,113,114,142],
gt34 = [0,-29,113,114,149],
gt35 = [0,-29,113,114,152],
gt36 = [0,-29,113,114,153],
gt37 = [0,-17,154,63,59,66,60,69,61,62],
gt38 = [0,-25,106,-2,141,113,114,142],
gt39 = [0,-33,10,155,11,-1,13,12,-2,15],
gt40 = [0,-29,113,114,156],
gt41 = [0,-26,159,158],

    // State action lookup maps
    sm0=[0,1,-3,0,-4,0,-3,2,-1,3,4,-1,5,6,7,8,-19,9,10,11,12,13,-25,14],
sm1=[0,15,-3,0,-4,0],
sm2=[0,16,-3,0,-4,0],
sm3=[0,17,-3,0,-4,0,-6,4,-1,5,6,7,8,-19,9,10,11,12,13],
sm4=[0,18,-3,0,-4,0,-31,9,10,11,12,13],
sm5=[0,19,-3,0,-4,0],
sm6=[0,20,-3,0,-4,0,-3,2,-2,20,-1,20,20,20,20,-19,20,20,20,20,20,-25,14],
sm7=[0,21,-3,0,-4,0,-3,2,-2,21,-1,21,21,21,21,-19,21,21,21,21,21,-25,14],
sm8=[0,22,-3,0,-4,0,-5,23,22,-1,22,22,22,22,-19,22,22,22,22,22],
sm9=[0,24,-3,0,-4,0,-3,24,-2,24,-1,24,24,24,24,-19,24,24,24,24,24,-25,24],
sm10=[0,25,-3,0,-4,0,-3,2,-1,25,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,-4,25,25,25,25,-1,25,-1,25,25,25,25,25,25,-6,25,25,-4,25,25,25,25,25,25,25,25,25,25,25,25,14],
sm11=[0,26,-3,0,-4,0,-3,26,-1,26,26,-1,26,26,26,26,26,26,26,26,26,26,26,26,-4,26,26,26,26,-1,26,-1,26,26,26,26,26,26,-6,26,26,-4,26,26,26,26,26,26,26,26,26,26,26,26,26],
sm12=[0,27,-3,0,-4,0,-3,27,-1,27,27,-1,27,27,27,27,27,27,27,27,27,27,27,27,-4,27,27,27,27,-1,27,-1,27,27,27,27,27,27,-6,27,27,-4,27,27,27,27,27,27,27,27,27,27,27,27,27],
sm13=[0,28,-3,0,-4,0,-3,28,-1,28,28,-1,28,28,28,28,28,28,28,28,28,28,28,28,-4,28,28,28,28,-1,28,-1,28,28,28,28,28,28,-6,28,28,-4,28,28,28,28,28,28,28,28,28,28,28,28,28],
sm14=[0,29,-3,30,-4,0,-3,2,-1,29,29,-1,29,29,29,29,29,29,29,29,29,29,29,29,-4,29,29,29,29,-1,29,-1,29,29,29,29,29,29,-6,29,29,-4,29,29,29,29,29,29,29,29,29,29,29,29,29,-1,31],
sm15=[0,32,-3,32,-4,0,-3,32,-1,32,32,-1,32,32,32,32,32,32,32,32,32,32,32,32,-4,32,32,32,32,-1,32,-1,32,32,32,32,32,32,-6,32,32,-4,32,32,32,32,32,32,32,32,32,32,32,32,32,-1,32],
sm16=[0,33,-3,0,-4,0,-3,2,-16,34,35,36,37,-4,38,-1,39,33,33,33,33,33,-1,40,41,42,43,44,45,-16,46,47,14],
sm17=[0,48,-3,0,-4,0,-3,48,-3,49,-12,48,48,48,48,-4,48,-1,48,48,48,48,48,48,-1,48,48,48,48,48,48,-16,48,48,48],
sm18=[0,48,-3,0,-4,0,-3,48,-3,50,-12,48,48,48,48,-4,48,-1,48,48,48,48,48,48,-1,48,48,48,48,48,48,-16,48,48,48],
sm19=[0,48,-3,0,-4,0,-3,48,-3,51,-12,48,48,48,48,-4,48,-1,48,48,48,48,48,48,-1,48,48,48,48,48,48,-16,48,48,48],
sm20=[0,48,-3,0,-4,0,-3,48,-16,48,48,48,48,-4,48,-1,48,48,48,48,48,48,-1,48,48,48,48,48,48,-16,48,48,48],
sm21=[0,48,-3,0,-4,0,-3,48,-3,52,-12,48,48,48,48,-4,48,-1,48,48,48,48,48,48,-1,48,48,48,48,48,48,-16,48,48,48],
sm22=[0,53,-3,0,-4,0,-30,54,-6,40,41,42,43,44,45],
sm23=[0,55,-3,0,-4,0,-30,55,-6,55,55,55,55,55,55],
sm24=[0,55,-3,0,-4,0,-7,56,-22,55,-6,55,55,55,55,55,55],
sm25=[0,55,-3,0,-4,0,-7,57,-22,55,-6,55,55,55,55,55,55],
sm26=[0,55,-3,0,-4,0,-7,58,-22,55,-6,55,55,55,55,55,55],
sm27=[0,55,-3,0,-4,0,-7,59,-22,55,-6,55,55,55,55,55,55],
sm28=[0,60,-3,0,-4,0,-31,9,10,11,12,13],
sm29=[0,61,-3,0,-4,0],
sm30=[0,62,-3,0,-4,0],
sm31=[0,63,-3,0,-4,0,-3,2,-2,63,-1,63,63,63,63,-19,63,63,63,63,63,-25,14],
sm32=[0,64,-3,0,-4,0,-5,23,64,-1,64,64,64,64,-19,64,64,64,64,64],
sm33=[0,65,-3,0,-4,0,-5,23,65,-1,65,65,65,65,-19,65,65,65,65,65],
sm34=[0,66,-3,0,-4,0,-3,66,-2,66,-1,66,66,66,66,-19,66,66,66,66,66,-25,66],
sm35=[0,67,-3,0,-4,0,-3,67,-2,67,-1,67,67,67,67,-19,67,67,67,67,67,-25,67],
sm36=[0,68,-3,0,-4,0,-3,68,-1,68,68,-1,68,68,68,68,68,68,68,68,68,68,68,68,-4,68,68,68,68,-1,68,-1,68,68,68,68,68,68,-6,68,68,-4,68,68,68,68,68,68,68,68,68,68,68,68,68],
sm37=[0,69,-3,30,-4,0,-3,2,-1,69,69,-1,69,69,69,69,69,69,69,69,69,69,69,69,-4,69,69,69,69,-1,69,-1,69,69,69,69,69,69,-6,69,69,-4,69,69,69,69,69,69,69,69,69,69,69,69,69,-1,31],
sm38=[0,70,-3,70,-4,0,-3,70,-1,70,70,-1,70,70,70,70,70,70,70,70,70,70,70,70,-4,70,70,70,70,-1,70,-1,70,70,70,70,70,70,-6,70,70,-4,70,70,70,70,70,70,70,70,70,70,70,70,70,-1,70],
sm39=[0,71,-3,71,-4,0,-3,71,-1,71,71,-1,71,71,71,71,71,71,71,71,71,71,71,71,-4,71,71,71,71,-1,71,-1,71,71,71,71,71,71,-6,71,71,-4,71,71,71,71,71,71,71,71,71,71,71,71,71,-1,71],
sm40=[0,-4,0,-4,0,-3,2],
sm41=[0,72,-3,0,-4,0,-31,72,72,72,72,72],
sm42=[0,73,-3,0,-4,0,-12,74,75,76,77,-13,73,-1,73,73,73,73,73],
sm43=[0,78,-3,0,-4,0,-12,78,78,78,78,79,80,81,82,-9,78,-1,78,78,78,78,78],
sm44=[0,83,-3,0,-4,0,-12,83,83,83,83,83,83,83,83,-9,83,-1,83,83,83,83,83],
sm45=[0,-4,0,-4,0,-3,2,-24,38,-1,39,-6,40,41,42,43,44,45,-16,46,47,14],
sm46=[0,-4,0,-4,0,-3,2,-16,34,35,36,37,-4,38,-1,39,-6,40,41,42,43,44,45,-16,46,47,14],
sm47=[0,84,-3,0,-4,0,-12,84,84,84,84,84,84,84,84,-9,84,-1,84,84,84,84,84],
sm48=[0,85,-3,0,-4,0,-12,85,85,85,85,85,85,85,85,-9,85,-1,85,85,85,85,85],
sm49=[0,-4,0,-4,0,-3,2,-57,14],
sm50=[0,86,-3,0,-4,0,-12,86,86,86,86,86,86,86,86,-9,86,-1,86,86,86,86,86],
sm51=[0,87,-3,0,-4,0,-12,87,87,87,87,87,87,87,87,-9,87,-1,87,87,87,87,87,87],
sm52=[0,88,-3,0,-4,0,-12,88,88,88,88,88,88,88,88,-4,89,90,91,92,-1,88,-1,88,88,88,88,88,88,-6,93,94,-4,95,96,97,98,99,100,101,102,103,104],
sm53=[0,105,-3,0,-4,0,-12,105,105,105,105,105,105,105,105,-4,105,105,105,105,-1,105,-1,105,105,105,105,105,105,-6,105,105,-4,105,105,105,105,105,105,105,105,105,105],
sm54=[0,106,-3,0,-4,0,-12,106,106,106,106,106,106,106,106,-4,89,90,91,92,-1,106,-1,106,106,106,106,106,106,-6,93,94,-4,95,96,97,98,99,100,101,102,103,104],
sm55=[0,107,-3,0,-4,0,-12,107,107,107,107,107,107,107,107,-4,107,107,107,107,-1,107,-1,107,107,107,107,107,107,-6,107,107,-4,107,107,107,107,107,107,107,107,107,107],
sm56=[0,108,-3,0,-4,0,-12,108,108,108,108,108,108,108,108,-4,89,90,91,92,-1,108,-1,108,108,108,108,108,108,-6,93,94,-4,95,96,97,98,99,100,101,102,103,104],
sm57=[0,109,-3,0,-4,0,-12,109,109,109,109,109,109,109,109,-4,109,109,109,109,-1,109,-1,109,109,109,109,109,109,-6,109,109,-4,109,109,109,109,109,109,109,109,109,109],
sm58=[0,110,-3,0,-4,0,-3,110,-16,110,110,110,110,-4,110,-1,110,110,110,110,110,110,-1,110,110,110,110,110,110,-16,110,110,110],
sm59=[0,111,-3,0,-4,0,-36,112],
sm60=[0,113,-3,0,-4,0,-36,113],
sm61=[0,114,-3,0,-4,0,-30,114,-6,114,114,114,114,114,114],
sm62=[0,115,-3,0,-4,0],
sm63=[0,116,-3,0,-4,0,-5,23,116,-1,116,116,116,116,-19,116,116,116,116,116],
sm64=[0,117,-3,117,-4,0,-3,117,-1,117,117,-1,117,117,117,117,117,117,117,117,117,117,117,117,-4,117,117,117,117,-1,117,-1,117,117,117,117,117,117,-6,117,117,-4,117,117,117,117,117,117,117,117,117,117,117,117,117,-1,117],
sm65=[0,118,-3,118,-4,0,-3,118,-1,118,118,-1,118,118,118,118,118,118,118,118,118,118,118,118,-4,118,118,118,118,-1,118,-1,118,118,118,118,118,118,-6,118,118,-4,118,118,118,118,118,118,118,118,118,118,118,118,118,-1,118],
sm66=[0,119,-3,0,-4,0,-12,119,119,119,119,119,119,119,119,-9,119,-1,119,119,119,119,119],
sm67=[0,-4,0,-4,0,-29,120],
sm68=[0,-4,0,-4,0,-29,121],
sm69=[0,122,-3,0,-4,0,-12,122,122,122,122,122,122,122,122,-4,123,124,125,126,-1,122,-1,122,122,122,122,122,-7,93,94,-4,95,96,97,98,99,100,101,102,103,104],
sm70=[0,-4,0,-4,0,-59,127],
sm71=[0,-4,0,-4,0,-60,128],
sm72=[0,129,-3,0,-4,0,-12,129,129,129,129,129,129,129,129,-9,129,-1,129,129,129,129,129,129,-12,95,96,97,98,99,100,101,102,103,104],
sm73=[0,130,-3,0,-4,0,-12,130,130,130,130,130,130,130,130,-9,130,-1,130,130,130,130,130,130],
sm74=[0,-1,131,-2,0,-4,0],
sm75=[0,-1,132,-2,0,-4,0],
sm76=[0,-4,0,-4,0,-24,133],
sm77=[0,134,-3,0,-4,0,-12,134,134,134,134,134,134,134,134,-9,134,-1,134,134,134,134,134,134],
sm78=[0,135,-3,0,-4,0,-12,135,135,135,135,135,135,135,135,-9,135,-1,135,135,135,135,135,135],
sm79=[0,136,-3,0,-4,0,-12,136,136,136,136,136,136,136,136,-9,136,-1,136,136,136,136,136,136],
sm80=[0,137,-3,0,-4,0,-12,137,137,137,137,137,137,137,137,-9,137,-1,137,137,137,137,137,137],
sm81=[0,138,-3,0,-4,0,-12,138,138,138,138,138,138,138,138,-9,138,-1,138,138,138,138,138,138,-12,95,96,97,98,99,100,101,102,103,104],
sm82=[0,139,-3,0,-4,0,-12,139,139,139,139,139,139,139,139,-9,139,-1,139,139,139,139,139,139],
sm83=[0,140,-3,0,-4,0,-12,140,140,140,140,140,140,140,140,-9,140,-1,140,140,140,140,140,140,-12,95,96,97,98,99,100,101,102,103,104],
sm84=[0,141,-3,0,-4,0,-12,141,141,141,141,141,141,141,141,-9,141,-1,141,141,141,141,141,141],
sm85=[0,-4,0,-4,0,-30,54,-6,40,41,42,43,44,45],
sm86=[0,122,-3,0,-4,0,-24,89,90,91,92,-8,122,-6,93,94,-4,95,96,97,98,99,100,101,102,103,104],
sm87=[0,142,-3,0,-4,0,-29,142,-1,142,142,142,142,142],
sm88=[0,143,-3,0,-4,0,-12,143,143,143,143,-13,143,-1,143,143,143,143,143],
sm89=[0,144,-3,0,-4,0,-12,144,144,144,144,144,144,144,144,-9,144,-1,144,144,144,144,144],
sm90=[0,145,-3,0,-4,0,-12,145,145,145,145,145,145,145,145,-9,145,-1,145,145,145,145,145,145,-12,95,96,97,98,99,100,101,102,103,104],
sm91=[0,146,-3,0,-4,0,-12,146,146,146,146,146,146,146,146,-9,146,-1,146,146,146,146,146,146],
sm92=[0,-1,132,-2,0,-4,0,-3,147,-57,147],
sm93=[0,-4,0,-4,0,-24,148],
sm94=[0,149,-3,0,-4,0,-12,149,149,149,149,149,149,149,149,-9,149,-1,149,149,149,149,149],
sm95=[0,150,-3,0,-4,0,-12,150,150,150,150,150,150,150,150,-9,150,-1,150,150,150,150,150,150],
sm96=[0,151,-3,0,-4,0,-12,151,151,151,151,151,151,151,151,-9,151,-1,151,151,151,151,151,151,-8,152,153,154,-1,151,151,151,151,151,151,151,151,151,151],
sm97=[0,-1,155,-2,0,-4,0],
sm98=[0,156,-3,0,-4,0,-12,156,156,156,156,156,156,156,156,-9,156,-1,156,156,156,156,156,156],
sm99=[0,157,-3,0,-4,0,-12,157,157,157,157,157,157,157,157,-9,157,-1,157,157,157,157,157,157],
sm100=[0,158,-3,0,-4,0,-36,158],
sm101=[0,159,-3,0,-4,0,-12,159,159,159,159,159,159,159,159,-9,159,-1,159,159,159,159,159],
sm102=[0,160,-3,0,-4,0,-12,160,160,160,160,160,160,160,160,-9,160,-1,160,160,160,160,160,160],
sm103=[0,-1,155,-2,0,-4,0,-3,161,-57,161],
sm104=[0,162,-3,0,-4,0,-12,162,162,162,162,162,162,162,162,-9,162,-1,162,162,162,162,162,162,-12,162,162,162,162,162,162,162,162,162,162],
sm105=[0,-1,163,-2,0,-4,0],
sm106=[0,-1,164,-2,0,-4,0],
sm107=[0,165,-3,0,-4,0,-12,165,165,165,165,165,165,165,165,-9,165,-1,165,165,165,165,165,165,-12,165,165,165,165,165,165,165,165,165,165],

    // Symbol Lookup map
    lu = new Map([[1,1],[2,2],[4,3],[8,4],[16,5],[32,6],[64,7],[128,8],[256,9],[512,10],[3,11],[264,12],[200,13],[201,14],["/",15],["?",16],[":",17],["f",18],["filter",19],["Filter",20],["FILTER",21],["&&",22],["AND",23],["And",24],["and",25],["||",26],["OR",27],["Or",28],["or",29],["NOT",30],["Not",31],["not",32],["!",33],["is",34],["=",35],["equals",36],["that",37],["(",38],[")",39],["#",40],["|",41],["s",42],["sort",43],["SORT",44],["Sort",45],[",",46],["created",47],["CREATED",48],["modifier",49],["MODIFIED",50],["size",51],["SIZE",52],[">",53],["<",54],["to",55],["TO",56],["-",57],[null,13],["DEC",59],["dec",60],["decending",61],["DECENDING",62],["down",63],["ASC",64],["asc",65],["ascending",66],["ASCENDING",67],["up",68],["\"",69],["'",70],["*",71],["\\",73]]),

    //Reverse Symbol Lookup map
    rlu = new Map([[1,1],[2,2],[3,4],[4,8],[5,16],[6,32],[7,64],[8,128],[9,256],[10,512],[11,3],[12,264],[13,200],[14,201],[15,"/"],[16,"?"],[17,":"],[18,"f"],[19,"filter"],[20,"Filter"],[21,"FILTER"],[22,"&&"],[23,"AND"],[24,"And"],[25,"and"],[26,"||"],[27,"OR"],[28,"Or"],[29,"or"],[30,"NOT"],[31,"Not"],[32,"not"],[33,"!"],[34,"is"],[35,"="],[36,"equals"],[37,"that"],[38,"("],[39,")"],[40,"#"],[41,"|"],[42,"s"],[43,"sort"],[44,"SORT"],[45,"Sort"],[46,","],[47,"created"],[48,"CREATED"],[49,"modifier"],[50,"MODIFIED"],[51,"size"],[52,"SIZE"],[53,">"],[54,"<"],[55,"to"],[56,"TO"],[57,"-"],[13,null],[59,"DEC"],[60,"dec"],[61,"decending"],[62,"DECENDING"],[63,"down"],[64,"ASC"],[65,"asc"],[66,"ascending"],[67,"ASCENDING"],[68,"up"],[69,"\""],[70,"'"],[71,"*"],[73,"\\"]]),

    // States 
    state = [sm0,
sm1,
sm2,
sm3,
sm4,
sm5,
sm6,
sm7,
sm8,
sm9,
sm10,
sm11,
sm12,
sm12,
sm13,
sm14,
sm15,
sm16,
sm17,
sm18,
sm19,
sm20,
sm21,
sm22,
sm23,
sm24,
sm25,
sm26,
sm27,
sm28,
sm29,
sm30,
sm31,
sm32,
sm33,
sm34,
sm35,
sm36,
sm37,
sm38,
sm39,
sm39,
sm39,
sm40,
sm41,
sm42,
sm43,
sm44,
sm45,
sm45,
sm45,
sm45,
sm46,
sm47,
sm48,
sm49,
sm49,
sm49,
sm50,
sm51,
sm51,
sm51,
sm51,
sm52,
sm53,
sm53,
sm54,
sm55,
sm55,
sm56,
sm57,
sm57,
sm58,
sm58,
sm58,
sm58,
sm59,
sm60,
sm49,
sm61,
sm61,
sm61,
sm61,
sm62,
sm63,
sm64,
sm65,
sm46,
sm46,
sm46,
sm46,
sm46,
sm46,
sm46,
sm46,
sm66,
sm66,
sm66,
sm66,
sm67,
sm68,
sm69,
sm70,
sm71,
sm72,
sm73,
sm74,
sm75,
sm75,
sm75,
sm76,
sm75,
sm75,
sm77,
sm78,
sm79,
sm79,
sm79,
sm79,
sm79,
sm80,
sm80,
sm80,
sm80,
sm80,
sm81,
sm82,
sm83,
sm84,
sm85,
sm86,
sm87,
sm87,
sm87,
sm87,
sm88,
sm88,
sm88,
sm88,
sm89,
sm49,
sm90,
sm91,
sm92,
sm92,
sm92,
sm93,
sm94,
sm94,
sm95,
sm96,
sm97,
sm98,
sm99,
sm100,
sm101,
sm102,
sm103,
sm104,
sm105,
sm106,
sm106,
sm106,
sm107],

/************ Functions *************/

    max = Math.max, min = Math.min,

    //Error Functions
    e = (tk,r,o,l,p)=>{if(l.END)l.throw("Unexpected end of input");else if(l.ty & (264)) l.throw(`Unexpected space character within input "${p.slice(l)}" `) ; else l.throw(`Unexpected token ${l.tx}" `)}, 
    eh = [e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e],

    //Empty Function
    nf = ()=>-1, 

    //Environment Functions
    
redv = (ret, fn, plen, ln, t, e, o, l, s) => {        ln = max(o.length - plen, 0);        const slice = o.slice(-plen);        o.length = ln + 1;        o[ln] = fn(slice, e, l, s, o, plen);        return ret;    },
rednv = (ret, Fn, plen, ln, t, e, o, l, s) => {        ln = max(o.length - plen, 0);        const slice = o.slice(-plen);        o.length = ln + 1;        o[ln] = new Fn(slice, e, l, s, o, plen);        return ret;    },
redn = (ret, plen, t, e, o) => {        if (plen > 0) {            let ln = max(o.length - plen, 0);            o[ln] = o[o.length - 1];            o.length = ln + 1;        }        return ret;    },
shftf = (ret, fn, t, e, o, l, s) => (fn(o, e, l, s), ret),
C20_query_body=function (sym){this.container = sym[0];this.filter = sym[1];this.sort = sym[2];},
C21_query_body=function (sym){this.container = null;this.filter = sym[0];this.sort = sym[1];},
C22_query_body=function (sym){this.container = sym[0];this.filter = null;this.sort = sym[1];},
C23_query_body=function (sym){this.container = sym[0];this.filter = sym[1];this.sort = null;},
C24_query_body=function (sym){this.container = null;this.filter = null;this.sort = sym[0];},
C25_query_body=function (sym){this.container = null;this.filter = sym[0];this.sort = null;},
C26_query_body=function (sym){this.container = sym[0];this.filter = null;this.sort = null;},
C27_query_body=function (){this.container = null;this.filter = null;this.sort = null;},
R30_container_identifier_list=sym=>(((sym[1] !== null) ? sym[0].push(sym[1]) : null,sym[0])),
R31_container_identifier_list=sym=>(sym[0] !== null) ? [sym[0]] : [],
C40_container_clause=function (sym){this.containers = [{ids : [""]},...sym[1]];this.id = sym[2];if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
C41_container_clause=function (sym){this.containers = [{ids : [""]},...sym[0]];this.id = sym[1];if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
C42_container_clause=function (sym){this.containers = [{ids : [""]}];this.id = sym[1];if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
C43_container_clause=function (sym){this.containers = [{ids : [""]},...sym[1]];this.id = null;if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
C44_container_clause=function (sym){this.containers = [{ids : [""]}];this.id = sym[0];if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
C45_container_clause=function (sym){this.containers = [{ids : [""]},...sym[0]];this.id = null;if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
C46_container_clause=function (){this.containers = [{ids : [""]}];this.id = null;if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
R50_container_identifier=sym=>sym[0],
R70_filter_clause=sym=>sym[1],
R71_filter_clause=()=>null,
C90_and_expression=function (sym){this.type = "AND";this.left = sym[0];this.right = sym[2];},
C100_or_expression=function (sym){this.type = "OR";this.left = sym[0];this.right = sym[2];},
C110_not_expression=function (sym){this.type = "NOT";this.left = sym[1];},
C130_wrapped_expression=function (sym){this.type = "MATCH";this.value = sym[0];},
C131_wrapped_expression=function (sym){this.type = "TAGEQ";this.tag = sym[1];this.val = sym[3];},
R150_sort_parameter_list=sym=>(((sym[1] !== null) ? sym[0].push(sym[2]) : null,sym[0])),
C190_created_expression=function (sym){this.type = "CREATED";this.val = sym[1];this.order = sym[2] || 1;},
C191_created_expression=function (sym){this.type = "CREATED";this.val = null;this.order = sym[1] || 1;},
C192_created_expression=function (sym){this.type = "CREATED";this.val = sym[1];this.order = 1;},
C193_created_expression=function (){this.type = "CREATED";this.val = null;this.order = 1;},
C210_modified_expression=function (sym){this.type = "MODIFIED";this.val = sym[1];this.order = sym[2] || 1;},
C211_modified_expression=function (sym){this.type = "MODIFIED";this.val = null;this.order = sym[1] || 1;},
C212_modified_expression=function (sym){this.type = "MODIFIED";this.val = sym[1];this.order = 1;},
C213_modified_expression=function (){this.type = "MODIFIED";this.val = null;this.order = 1;},
C230_size_expression=function (sym){this.type = "SIZE";this.val = sym[1];this.order = sym[2] || 1;},
C231_size_expression=function (sym){this.type = "SIZE";this.val = null;this.order = sym[1] || 1;},
C232_size_expression=function (sym){this.type = "SIZE";this.val = sym[1];this.order = 1;},
C233_size_expression=function (){this.type = "SIZE";this.val = null;this.order = 1;},
C240_tag_expression=function (sym){this.type = "TAG";this.tag = sym[1];this.val = sym[2];this.order = sym[3] || 1;},
C241_tag_expression=function (sym){this.type = "TAG";this.tag = sym[1];this.val = null;this.order = sym[2] || 1;},
C242_tag_expression=function (sym){this.type = "TAG";this.tag = sym[1];this.val = sym[2];this.order = 1;},
C243_tag_expression=function (sym){this.type = "TAG";this.tag = sym[1];this.val = null;this.order = 1;},
R280_length_expression=sym=>[sym[1],sym[2]],
R281_length_expression=sym=>[sym[1]],
R310_order=()=>-1,
R311_order=()=>1,
C340_identifier=function (sym){this.ids = sym[0];},
R360_string_data_val_list=sym=>sym[0] + sym[1],
R361_string_data_val_list=sym=>sym[0] + "",
R370_string_data=sym=>[sym[0],...sym[1]].join("").trim(),
R371_string_data=sym=>[sym[0]].join("").trim(),

    //Sparse Map Lookup
    lsm = (index, map) => {    if (map[0] == 0xFFFFFFFF) return map[index + 1];    for (let i = 1, ind = 0, l = map.length, n = 0; i < l && ind <= index; i++) {        if (ind !== index) {            if ((n = map[i]) > -1) ind++;            else ind += -n;        } else return map[i];    }    return -1;},

    //State Action Functions
    state_funct = [(...v)=>(redn(2051,0,...v)),
e=>66,
e=>26,
e=>74,
e=>78,
e=>82,
e=>86,
e=>90,
e=>98,
e=>102,
e=>106,
e=>110,
e=>114,
e=>58,
(...v)=>redn(5,1,...v),
(...v)=>redn(1031,1,...v),
(...v)=>rednv(2055,C26_query_body,1,0,...v),
(...v)=>rednv(2055,C25_query_body,1,0,...v),
(...v)=>rednv(2055,C24_query_body,1,0,...v),
(...v)=>rednv(4103,C46_container_clause,1,0,...v),
(...v)=>rednv(4103,C45_container_clause,1,0,...v),
(...v)=>rednv(4103,C44_container_clause,1,0,...v),
e=>146,
(...v)=>redv(3079,R31_container_identifier_list,1,0,...v),
(...v)=>rednv(34823,C340_identifier,1,0,...v),
(...v)=>redv(33799,R31_container_identifier_list,1,0,...v),
(...v)=>redn(35847,1,...v),
(...v)=>redn(38919,1,...v),
(...v)=>redv(37895,R371_string_data,1,0,...v),
e=>170,
e=>174,
(...v)=>redn(41991,1,...v),
(...v)=>redv(7175,R71_filter_clause,1,0,...v),
e=>194,
e=>198,
e=>202,
e=>206,
e=>210,
e=>222,
e=>258,
e=>262,
e=>270,
e=>274,
e=>282,
e=>286,
e=>226,
e=>230,
(...v)=>redn(6151,1,...v),
e=>290,
e=>294,
e=>298,
e=>302,
(...v)=>redv(16391,R71_filter_clause,1,0,...v),
e=>314,
(...v)=>redn(14343,1,...v),
e=>318,
e=>322,
e=>326,
e=>330,
(...v)=>rednv(2059,C23_query_body,2,0,...v),
(...v)=>rednv(2059,C22_query_body,2,0,...v),
(...v)=>rednv(2059,C21_query_body,2,0,...v),
(...v)=>rednv(4107,C43_container_clause,2,0,...v),
(...v)=>rednv(4107,C42_container_clause,2,0,...v),
(...v)=>rednv(4107,C41_container_clause,2,0,...v),
(...v)=>redv(3083,R30_container_identifier_list,2,0,...v),
(...v)=>redv(5131,R50_container_identifier,2,0,...v),
(...v)=>redv(33803,R30_container_identifier_list,2,0,...v),
(...v)=>redv(37899,R370_string_data,2,0,...v),
(...v)=>redv(36871,R361_string_data_val_list,1,0,...v),
(...v)=>redn(39943,1,...v),
(...v)=>redv(7179,R70_filter_clause,2,0,...v),
(...v)=>redn(9223,1,...v),
e=>350,
e=>354,
e=>358,
e=>362,
(...v)=>redn(10247,1,...v),
e=>366,
e=>370,
e=>374,
e=>378,
(...v)=>redn(11271,1,...v),
(...v)=>rednv(13319,C130_wrapped_expression,1,0,...v),
(...v)=>redn(13319,1,...v),
(...v)=>redn(32775,1,...v),
(...v)=>redn(17415,1,...v),
(...v)=>rednv(19463,C193_created_expression,1,0,...v),
e=>430,
e=>434,
e=>438,
e=>442,
e=>446,
e=>450,
e=>462,
e=>466,
e=>470,
e=>474,
e=>478,
e=>482,
e=>486,
e=>490,
e=>494,
e=>498,
(...v)=>redn(18439,1,...v),
(...v)=>rednv(21511,C213_modified_expression,1,0,...v),
(...v)=>redn(20487,1,...v),
(...v)=>rednv(23559,C233_size_expression,1,0,...v),
(...v)=>redn(22535,1,...v),
(...v)=>redn(6155,2,...v),
(...v)=>redv(16395,R70_filter_clause,2,0,...v),
e=>518,
(...v)=>redv(15367,R31_container_identifier_list,1,0,...v),
(...v)=>redn(14347,2,...v),
(...v)=>rednv(2063,C20_query_body,3,0,...v),
(...v)=>rednv(4111,C40_container_clause,3,0,...v),
(...v)=>redv(36875,R360_string_data_val_list,2,0,...v),
(...v)=>redv(40971,R70_filter_clause,2,0,...v),
(...v)=>rednv(11275,C110_not_expression,2,0,...v),
e=>558,
(...v)=>redn(8199,1,...v),
(...v)=>rednv(24587,C243_tag_expression,2,0,...v),
e=>574,
e=>578,
e=>582,
e=>586,
e=>590,
e=>594,
(...v)=>rednv(19467,C192_created_expression,2,0,...v),
(...v)=>rednv(19467,C191_created_expression,2,0,...v),
e=>602,
(...v)=>redn(25607,1,...v),
e=>606,
(...v)=>redv(31751,R310_order,1,0,...v),
(...v)=>redv(31751,R311_order,1,0,...v),
(...v)=>redn(29703,1,...v),
(...v)=>redn(30727,1,...v),
(...v)=>rednv(21515,C212_modified_expression,2,0,...v),
(...v)=>rednv(21515,C211_modified_expression,2,0,...v),
(...v)=>rednv(23563,C232_size_expression,2,0,...v),
(...v)=>rednv(23563,C231_size_expression,2,0,...v),
(...v)=>rednv(9231,C90_and_expression,3,0,...v),
(...v)=>rednv(10255,C100_or_expression,3,0,...v),
(...v)=>redv(13327,R70_filter_clause,3,0,...v),
(...v)=>rednv(24591,C242_tag_expression,3,0,...v),
(...v)=>rednv(24591,C241_tag_expression,3,0,...v),
(...v)=>redn(12295,1,...v),
e=>630,
(...v)=>redv(32783,R70_filter_clause,3,0,...v),
(...v)=>rednv(19471,C190_created_expression,3,0,...v),
(...v)=>redv(28683,R281_length_expression,2,0,...v),
e=>642,
e=>646,
e=>650,
(...v)=>redn(25611,2,...v),
(...v)=>rednv(21519,C210_modified_expression,3,0,...v),
(...v)=>rednv(23567,C230_size_expression,3,0,...v),
(...v)=>redv(15375,R150_sort_parameter_list,3,0,...v),
(...v)=>rednv(13331,C131_wrapped_expression,4,0,...v),
(...v)=>rednv(24595,C240_tag_expression,4,0,...v),
(...v)=>redn(12299,2,...v),
(...v)=>redv(28687,R280_length_expression,3,0,...v),
e=>654,
(...v)=>redn(26631,1,...v),
(...v)=>redv(27659,R70_filter_clause,2,0,...v)],

    //Goto Lookup Functions
    goto = [v=>lsm(v,gt0),
nf,
nf,
v=>lsm(v,gt1),
v=>lsm(v,gt2),
nf,
v=>lsm(v,gt3),
v=>lsm(v,gt4),
nf,
nf,
v=>lsm(v,gt5),
nf,
nf,
nf,
nf,
v=>lsm(v,gt6),
nf,
v=>lsm(v,gt7),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt8),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt9),
nf,
nf,
v=>lsm(v,gt10),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt11),
nf,
nf,
nf,
nf,
v=>lsm(v,gt12),
nf,
nf,
nf,
nf,
v=>lsm(v,gt13),
v=>lsm(v,gt14),
v=>lsm(v,gt15),
v=>lsm(v,gt16),
v=>lsm(v,gt17),
nf,
nf,
v=>lsm(v,gt18),
v=>lsm(v,gt19),
v=>lsm(v,gt20),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt21),
nf,
nf,
v=>lsm(v,gt22),
nf,
nf,
v=>lsm(v,gt23),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt24),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt25),
v=>lsm(v,gt26),
v=>lsm(v,gt27),
v=>lsm(v,gt28),
v=>lsm(v,gt29),
v=>lsm(v,gt30),
v=>lsm(v,gt31),
v=>lsm(v,gt32),
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt33),
nf,
nf,
v=>lsm(v,gt34),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt35),
nf,
v=>lsm(v,gt36),
nf,
v=>lsm(v,gt37),
v=>lsm(v,gt38),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt39),
v=>lsm(v,gt40),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt41),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf];

function getToken(l, SYM_LU) {
    if (l.END) return 0; /*$eof*/

    switch (l.ty) {
        case 2:
            //*
            if (SYM_LU.has(l.tx)) return 14;
            /*/
                console.log(l.tx, SYM_LU.has(l.tx), SYM_LU.get(l.tx))
                if (SYM_LU.has(l.tx)) return SYM_LU.get(l.tx);
            //*/
            return 2;
        case 1:
            return 1;
        case 4:
            return 3;
        case 256:
            return 9;
        case 8:
            return 4;
        case 512:
            return 10;
        default:
            return SYM_LU.get(l.tx) || SYM_LU.get(l.ty);
    }
}

/************ Parser *************/

function parser(l, e = {}) {

    fn = e.functions;

    l.IWS = false;
    l.PARSE_STRING = true;

    if (symbols.length > 0) {
        symbols.forEach(s => { l.addSymbol(s) });
        l.tl = 0;
        l.next();
    }

    const o = [],
        ss = [0, 0];

    let time = 1000000,
        RECOVERING = 100,
        RESTARTED = true,
        tk = getToken(l, lu),
        p = l.copy(),
        sp = 1,
        len = 0,
        reduceStack = (e.reduceStack = []),
        ROOT = 10000,
        off = 0;

    outer:

        while (time-- > 0) {

            const fn = lsm(tk, state[ss[sp]]) || 0;

            let r,
                gt = -1;

            if (fn == 0) {
                /*Ignore the token*/
                tk = getToken(l.next(), lu);
                continue;
            }

            if (fn > 0) {
                r = state_funct[fn - 1](tk, e, o, l, ss[sp - 1]);
            } else {

                if (tk == 14) {
                    tk = lu.get(l.tx);
                    continue;
                }

                if (l.ty == 8 && l.tl > 1) {
                    // Make sure that special tokens are not getting in the way
                    l.tl = 0;
                    // This will skip the generation of a custom symbol
                    l.next(l, false);

                    if (l.tl == 1)
                        continue;
                }

                if (RECOVERING > 1 && !l.END) {

                    if (tk !== lu.get(l.ty)) {
                        tk = lu.get(l.ty);
                        continue;
                    }

                    if (tk !== 13) {
                        tk = 13;
                        RECOVERING = 1;
                        continue;
                    }
                }

                tk = getToken(l, lu);

                const recovery_token = eh[ss[sp]](tk, e, o, l, p, ss[sp], (lex) => getToken(lex, lu));

                if (RECOVERING > 0 && recovery_token >= 0) {
                    RECOVERING = -1; /* To prevent infinite recursion */
                    tk = recovery_token;
                    l.tl = 0; /*reset current token */
                    continue;
                }
            }

            switch (r & 3) {
                case 0:
                    /* ERROR */

                    if (tk == "$eof")
                        l.throw("Unexpected end of input");

                    l.throw(`Unexpected token [${RECOVERING ? l.next().tx : l.tx}]`);
                    return [null];

                case 1:
                    /* ACCEPT */
                    break outer;

                case 2:

                    /*SHIFT */
                    o.push(l.tx);
                    ss.push(off, r >> 2);
                    sp += 2;
                    l.next();
                    off = l.off;
                    tk = getToken(l, lu);
                    RECOVERING++;
                    break;

                case 3:
                    /* REDUCE */
                    RESTARTED = true;

                    len = (r & 0x3FC) >> 1;

                    ss.length -= len;
                    sp -= len;
                    gt = goto[ss[sp]](r >> 10);

                    if (gt < 0)
                        l.throw("Invalid state reached!");

                    if (reduceStack.length > 0) {
                        let i = reduceStack.length - 1;
                        while (i > -1) {
                            const item = reduceStack[i--];

                            if (item.index == sp) {
                                item.action(output);
                            } else if (item.index > sp) {
                                reduceStack.length--;
                            } else {
                                break;
                            }
                        }
                    }

                    ss.push(off, gt);
                    sp += 2;
                    break;
            }
        }
    return o[0];
}; const gnql = parser;