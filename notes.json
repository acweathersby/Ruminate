{"data":[{"id":"/test2","modified":1566221270647,"uid":"016c9d4c6aac-c336-6443db20-b3bc0317","body":"\n# Getting Started With Graze\n\n## Introduction\nGraze is Ruminate's data wrangler. Its purpose is to intelligently pull and push data between the graze data store and text based files. It accomplishes this through the use of **junctions**. **Junctions** are binding points using Ruminate query syntax that instruct Graze on what to do with a block of text data following the junction.\n\n```                               \n((ruminate/docs/graze/example-1?#example=1))[sync, (\\n , )]\n\nWhen Graze encounters the preceding junction point, it will preform a sync action. \nThis compares the note that is stored at {ruminate/docs/graze/example-1} with this document.\nIf the document is newer, then the text data starting at the first line after the junction up\ntill, but not including, the sequence of \"\" characters replaces the body data of the note. \nIf the note is newer, than this paragraph is replaced by the note's body data. ```In addition to pulling or pushing text data, a **junction** can instruct Graze to append tags to a note, or to filter and sort note results that are then appended to the text file. This guide will go the most common uses of Graze.\n\n## The Junction \nThe junction is a two part text structure that encapulates the majority of Graze's utility. It is comprised of a Ruminate **query string** surrounded by ```((``` ```))``` tags, followed by an **action block** that is surounded by ```[``` ```]``` characters. \n\nThe Ruminate query string determines what note or set of notes will be affected by Graze, with the **action block** instructing Graze on what to do with those notes. \n\nCheckout the note on [ruminate://ruminate/docs/query_syntax](Ruminate query syntax) for more details on the query language Ruminate uses. \n\nThe **action block** is unique to Graze. It follows a very basic form: {action, limits}. Actions are keywords that tell Graze what to do, and limits tell Graze on what part of the file the action should be performed on. Limits always refer to text data following the junction point.\n\n* insert - With the insert action, Graze will pull body data from the notes and insert into the document following the junction. * upload - Upload will cause Graze to copy the text data from the file and either create a new or replace an existing note's body data with the copied text. * sync - \n\n\n## \n\n","tags":["file:./data/graze/getting_started.md"],"query_data":"/test2 file:./data/graze/getting_started.md \n# Getting Started With Graze\n\n## Introduction\nGraze is Ruminate's data wrangler. Its purpose is to intelligently pull and push data between the graze data store and text based files. It accomplishes this through the use of **junctions**. **Junctions** are binding points using Ruminate query syntax that instruct Graze on what to do with a block of text data following the junction.\n\n```                               \n((ruminate/docs/graze/example-1?#example=1))[sync, (\\n , )]\n\nWhen Graze encounters the preceding junction point, it will preform a sync action. \nThis compares the note that is stored at {ruminate/docs/graze/example-1} with this document.\nIf the document is newer, then the text data starting at the first line after the junction up\ntill, but not including, the sequence of \"\" characters replaces the body data of the note. \nIf the note is newer, than this paragraph is replaced by the note's body data. ```In addition to pulling or pushing text data, a **junction** can instruct Graze to append tags to a note, or to filter and sort note results that are then appended to the text file. This guide will go the most common uses of Graze.\n\n## The Junction \nThe junction is a two part text structure that encapulates the majority of Graze's utility. It is comprised of a Ruminate **query string** surrounded by ```((``` ```))``` tags, followed by an **action block** that is surounded by ```[``` ```]``` characters. \n\nThe Ruminate query string determines what note or set of notes will be affected by Graze, with the **action block** instructing Graze on what to do with those notes. \n\nCheckout the note on [ruminate://ruminate/docs/query_syntax](Ruminate query syntax) for more details on the query language Ruminate uses. \n\nThe **action block** is unique to Graze. It follows a very basic form: {action, limits}. Actions are keywords that tell Graze what to do, and limits tell Graze on what part of the file the action should be performed on. Limits always refer to text data following the junction point.\n\n* insert - With the insert action, Graze will pull body data from the notes and insert into the document following the junction. * upload - Upload will cause Graze to copy the text data from the file and either create a new or replace an existing note's body data with the copied text. * sync - \n\n\n## \n\n"},{"id":"/ruminate/docs/graze/example-1","modified":1566007127693,"uid":"016c9d4c6bf7-8c10-2a74727e-2257a88e","body":"","tags":["example:1"],"query_data":"/ruminate/docs/graze/example-1 example:1 "}]}