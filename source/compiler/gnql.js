let fn = {}; const 
/************** Maps **************/

    /* Symbols To Inject into the Lexer */
    symbols = ["&&","||"],

    /* Goto lookup maps */
    gt0 = [0,-1,1,2,7,3,9,20,4,-5,26,-1,5,-24,10,8,11,-2,13,12,-2,15],
gt1 = [0,-6,20,32,-5,26,-1,33],
gt2 = [0,-13,26,-1,34],
gt3 = [0,-3,35,-1,9,-34,10,36,11,-2,13,12,-2,15],
gt4 = [0,-5,38,-34,10,37,11,-2,13,12,-2,15],
gt5 = [0,-42,40,-2,13,12,-2,15],
gt6 = [0,-44,41,-2,42,44,43],
gt7 = [0,-9,47,48,49,50,-3,58,65,61,68,62,71,63,64,-16,10,57,11,56,-1,13,12,-2,15],
gt8 = [0,-14,79,-1,80,65,61,68,62,71,63,64],
gt9 = [0,-13,26,-1,85],
gt10 = [0,-5,38,-34,10,86,11,-2,13,12,-2,15],
gt11 = [0,-47,87,44,43],
gt12 = [0,-49,88],
gt13 = [0,-12,97,-3,58,65,61,68,62,71,63,64,-16,10,57,11,56,-1,13,12,-2,15],
gt14 = [0,-12,98,-3,58,65,61,68,62,71,63,64,-16,10,57,11,56,-1,13,12,-2,15],
gt15 = [0,-12,99,-3,58,65,61,68,62,71,63,64,-16,10,57,11,56,-1,13,12,-2,15],
gt16 = [0,-12,100,-3,58,65,61,68,62,71,63,64,-16,10,57,11,56,-1,13,12,-2,15],
gt17 = [0,-8,101,102,48,49,50,-3,58,65,61,68,62,71,63,64,-16,10,57,11,56,-1,13,12,-2,15],
gt18 = [0,-45,103,-3,15],
gt19 = [0,-45,104,-3,15],
gt20 = [0,-24,107,108,109,105,120,-2,111,122,-3,112,125,126,106],
gt21 = [0,-24,107,108,109,137,120,-2,111,122,-3,112,125,126,138],
gt22 = [0,-24,107,108,109,139,120,-2,111,122,-3,112],
gt23 = [0,-40,10,142,11,-2,13,12,-2,15],
gt24 = [0,-9,144,48,49,50,-3,58,65,61,68,62,71,63,64,-16,10,57,11,56,-1,13,12,-2,15],
gt25 = [0,-9,145,48,49,50,-3,58,65,61,68,62,71,63,64,-16,10,57,11,56,-1,13,12,-2,15],
gt26 = [0,-9,146,48,49,50,-3,58,65,61,68,62,71,63,64,-16,10,57,11,56,-1,13,12,-2,15],
gt27 = [0,-9,147,48,49,50,-3,58,65,61,68,62,71,63,64,-16,10,57,11,56,-1,13,12,-2,15],
gt28 = [0,-10,148,49,50,-3,58,65,61,68,62,71,63,64,-16,10,57,11,56,-1,13,12,-2,15],
gt29 = [0,-10,149,49,50,-3,58,65,61,68,62,71,63,64,-16,10,57,11,56,-1,13,12,-2,15],
gt30 = [0,-10,150,49,50,-3,58,65,61,68,62,71,63,64,-16,10,57,11,56,-1,13,12,-2,15],
gt31 = [0,-10,151,49,50,-3,58,65,61,68,62,71,63,64,-16,10,57,11,56,-1,13,12,-2,15],
gt32 = [0,-37,125,126,155],
gt33 = [0,-40,10,159,11,-2,13,12,-2,15],
gt34 = [0,-28,120,-2,162,122,-3,163],
gt35 = [0,-33,168,-11,169,-3,15],
gt36 = [0,-37,125,126,171],
gt37 = [0,-37,125,126,172],
gt38 = [0,-24,107,108,109,173,120,-2,111,122,-3,112,125,126,174],
gt39 = [0,-16,175,65,61,68,62,71,63,64],
gt40 = [0,-29,179,178],
gt41 = [0,-34,186,185],
gt42 = [0,-37,125,126,191],
gt43 = [0,-33,193,-11,169,-3,15],

    // State action lookup maps
    sm0=[0,1,-1,2,-1,0,-2,3,4,0,-3,5,-1,6,7,-1,8,9,10,11,-14,12,13,14,15,16,-39,17],
sm1=[0,18,-3,0,-4,0],
sm2=[0,19,-3,0,-4,0],
sm3=[0,20,-3,0,-4,0,-6,7,-1,8,9,10,11,-14,12,13,14,15,16],
sm4=[0,21,-3,0,-4,0,-26,12,13,14,15,16],
sm5=[0,22,-3,0,-4,0],
sm6=[0,23,-1,2,-1,0,-2,3,4,0,-3,5,-2,23,-1,23,23,23,23,-14,23,23,23,23,23,-39,17],
sm7=[0,24,-1,2,-1,0,-2,3,4,0,-3,5,-2,24,-1,24,24,24,24,-14,24,24,24,24,24,-39,17],
sm8=[0,25,-3,0,-4,0,-5,26,25,-1,25,25,25,25,-14,25,25,25,25,25],
sm9=[0,27,-1,27,-1,0,-2,27,27,0,-3,27,-2,27,-1,27,27,27,27,-14,27,27,27,27,27,-39,27],
sm10=[0,28,-1,2,-1,0,-2,3,4,0,-3,5,-1,28,28,-1,28,28,28,28,28,28,28,28,28,28,28,28,-5,28,28,28,28,28,28,28,-7,28,28,28,28,28,-1,28,-1,28,28,-1,28,-5,28,28,28,28,28,28,28,28,28,28,28,28,-2,17],
sm11=[0,29,-1,29,-1,0,-2,29,29,0,-3,29,-1,29,29,-1,29,29,29,29,29,29,29,29,29,29,29,29,-5,29,29,29,29,29,29,29,-7,29,29,29,29,29,-1,29,-1,29,29,-1,29,-5,29,29,29,29,29,29,29,29,29,29,29,29,-2,29],
sm12=[0,30,-1,30,-1,0,-2,30,30,0,-3,30,-1,30,30,-1,30,30,30,30,30,30,30,30,30,30,30,30,-5,30,30,30,30,30,30,30,-7,30,30,30,30,30,-1,30,-1,30,30,-1,30,-5,30,30,30,30,30,30,30,30,30,30,30,30,-2,30],
sm13=[0,31,-1,31,-1,0,-2,31,31,0,-3,31,-1,31,31,-1,31,31,31,31,31,31,31,31,31,31,31,31,-5,31,31,31,31,31,31,31,-7,31,31,31,31,31,-1,31,-1,31,31,-1,31,-5,31,31,31,31,31,31,31,31,31,31,31,31,-2,31],
sm14=[0,32,-1,2,-1,33,-2,3,4,0,-3,5,-1,32,32,-1,32,32,32,32,32,32,32,32,32,32,32,32,-5,32,32,32,32,32,32,32,-7,32,32,32,32,32,-1,32,-1,32,32,-1,32,32,32,32,32,-1,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-1,34],
sm15=[0,35,-1,35,-1,35,-2,35,35,0,-3,35,-1,35,35,-1,35,35,35,35,35,35,35,35,35,35,35,35,-5,35,35,35,35,35,35,35,-7,35,35,35,35,35,-1,35,-1,35,35,-1,35,35,35,35,35,-1,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-1,35],
sm16=[0,36,-1,2,-1,0,-2,3,4,0,-3,5,-16,37,38,39,40,41,-1,36,36,36,36,36,-1,42,43,44,45,46,47,48,-29,49,50,17],
sm17=[0,51,-1,51,-1,0,-2,51,51,0,-3,51,-3,52,-12,51,51,51,51,51,-1,51,51,51,51,51,-1,51,51,51,51,51,51,51,-29,51,51,51],
sm18=[0,51,-1,51,-1,0,-2,51,51,0,-3,51,-3,53,-12,51,51,51,51,51,-1,51,51,51,51,51,-1,51,51,51,51,51,51,51,-29,51,51,51],
sm19=[0,51,-1,51,-1,0,-2,51,51,0,-3,51,-3,54,-12,51,51,51,51,51,-1,51,51,51,51,51,-1,51,51,51,51,51,51,51,-29,51,51,51],
sm20=[0,51,-1,51,-1,0,-2,51,51,0,-3,51,-16,51,51,51,51,51,-1,51,51,51,51,51,-1,51,51,51,51,51,51,51,-29,51,51,51],
sm21=[0,51,-1,51,-1,0,-2,51,51,0,-3,51,-3,55,-12,51,51,51,51,51,-1,51,51,51,51,51,-1,51,51,51,51,51,51,51,-29,51,51,51],
sm22=[0,56,-3,0,-4,0,-32,42,43,44,45,46,47,48],
sm23=[0,57,-3,0,-4,0,-32,57,57,57,57,57,57,57],
sm24=[0,57,-3,0,-4,0,-7,58,-24,57,57,57,57,57,57,57],
sm25=[0,57,-3,0,-4,0,-7,59,-24,57,57,57,57,57,57,57],
sm26=[0,57,-3,0,-4,0,-7,60,-24,57,57,57,57,57,57,57],
sm27=[0,57,-3,0,-4,0,-7,61,-24,57,57,57,57,57,57,57],
sm28=[0,62,-3,0,-4,0,-26,12,13,14,15,16],
sm29=[0,63,-3,0,-4,0],
sm30=[0,64,-3,0,-4,0],
sm31=[0,65,-1,2,-1,0,-2,3,4,0,-3,5,-2,65,-1,65,65,65,65,-14,65,65,65,65,65,-39,17],
sm32=[0,66,-3,0,-4,0,-5,26,66,-1,66,66,66,66,-14,66,66,66,66,66],
sm33=[0,67,-3,0,-4,0,-5,26,67,-1,67,67,67,67,-14,67,67,67,67,67],
sm34=[0,68,-1,68,-1,0,-2,68,68,0,-3,68,-2,68,-1,68,68,68,68,-14,68,68,68,68,68,-39,68],
sm35=[0,69,-1,69,-1,0,-2,69,69,0,-3,69,-2,69,-1,69,69,69,69,-14,69,69,69,69,69,-39,69],
sm36=[0,70,-1,70,-1,0,-2,70,70,0,-3,70,-1,70,70,-1,70,70,70,70,70,70,70,70,70,70,70,70,-5,70,70,70,70,70,70,70,-7,70,70,70,70,70,-1,70,-1,70,70,-1,70,-5,70,70,70,70,70,70,70,70,70,70,70,70,-2,70],
sm37=[0,71,-1,2,-1,33,-2,3,4,0,-3,5,-1,71,71,-1,71,71,71,71,71,71,71,71,71,71,71,71,-5,71,71,71,71,71,71,71,-7,71,71,71,71,71,-1,71,-1,71,71,-1,71,71,71,71,71,-1,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-1,34],
sm38=[0,72,-1,72,-1,72,-2,72,72,0,-3,72,-1,72,72,-1,72,72,72,72,72,72,72,72,72,72,72,72,-5,72,72,72,72,72,72,72,-7,72,72,72,72,72,-1,72,-1,72,72,-1,72,72,72,72,72,-1,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-1,72],
sm39=[0,73,-1,73,-1,73,-2,73,73,0,-3,73,-1,73,73,-1,73,73,73,73,73,73,73,73,73,73,73,73,-5,73,73,73,73,73,73,73,-7,73,73,73,73,73,-1,73,-1,73,73,-1,73,73,73,73,73,-1,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-1,73],
sm40=[0,-2,2,-1,0,-2,3,4,0,-3,5],
sm41=[0,74,-3,0,-4,0,-26,74,74,74,74,74],
sm42=[0,75,-3,0,-4,0,-12,76,77,78,79,-9,75,75,75,75,75,75],
sm43=[0,80,-3,0,-4,0,-12,80,80,80,80,81,82,83,84,-5,80,80,80,80,80,80],
sm44=[0,85,-3,0,-4,0,-12,85,85,85,85,85,85,85,85,-5,85,85,85,85,85,85],
sm45=[0,-2,2,-1,0,-2,3,4,0,-3,5,-20,41,-7,42,43,44,45,46,47,48,-29,49,50,17],
sm46=[0,-2,2,-1,0,-2,3,4,0,-3,5,-16,37,38,39,40,41,-7,42,43,44,45,46,47,48,-29,49,50,17],
sm47=[0,86,-3,0,-4,0,-12,86,86,86,86,86,86,86,86,-5,86,86,86,86,86,86],
sm48=[0,87,-3,0,-4,0,-12,87,87,87,87,87,87,87,87,-5,87,87,87,87,87,87],
sm49=[0,88,-3,0,-4,0,-12,88,88,88,88,88,88,88,88,-5,88,88,88,88,88,88,88],
sm50=[0,89,-3,0,-4,0,-12,89,89,89,89,89,89,89,89,-5,89,89,89,89,89,89,89,-7,90,91,92,93,94,-1,95,-1,96,97,-1,98,-5,99,100,101,102,103,104,105,106,107,108,109,110],
sm51=[0,111,-3,0,-4,0,-12,111,111,111,111,111,111,111,111,-5,111,111,111,111,111,111,111,-7,111,111,111,111,111,-1,111,-1,111,111,-1,111,-5,111,111,111,111,111,111,111,111,111,111,111,111],
sm52=[0,112,-3,0,-4,0,-12,112,112,112,112,112,112,112,112,-5,112,112,112,112,112,112,112,-7,90,91,92,93,94,-1,95,-1,96,97,-1,98,-5,99,100,101,102,103,104,105,106,107,108,109,110],
sm53=[0,113,-3,0,-4,0,-12,113,113,113,113,113,113,113,113,-5,113,113,113,113,113,113,113,-7,113,113,113,113,113,-1,113,-1,113,113,-1,113,-5,113,113,113,113,113,113,113,113,113,113,113,113],
sm54=[0,-4,0,-4,0,-39,90,91,92,93,94,-1,114,-1,115,97,-1,98,-5,99,100],
sm55=[0,-4,0,-4,0,-39,116,116,116,116,116,-1,116,-1,116,116,-1,116,-5,116,116],
sm56=[0,-2,2,-1,0,-2,3,4,0,-3,5,-66,17],
sm57=[0,117,-1,117,-1,0,-2,117,117,0,-3,117,-16,117,117,117,117,117,-1,117,117,117,117,117,-1,117,117,117,117,117,117,117,-29,117,117,117],
sm58=[0,118,-3,0,-4,0,-31,119],
sm59=[0,120,-3,0,-4,0,-31,120],
sm60=[0,121,-3,0,-4,0,-32,121,121,121,121,121,121,121],
sm61=[0,122,-3,0,-4,0],
sm62=[0,123,-3,0,-4,0,-5,26,123,-1,123,123,123,123,-14,123,123,123,123,123],
sm63=[0,124,-1,124,-1,124,-2,124,124,0,-3,124,-1,124,124,-1,124,124,124,124,124,124,124,124,124,124,124,124,-5,124,124,124,124,124,124,124,-7,124,124,124,124,124,-1,124,-1,124,124,-1,124,124,124,124,124,-1,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,-1,124],
sm64=[0,125,-1,125,-1,125,-2,125,125,0,-3,125,-1,125,125,-1,125,125,125,125,125,125,125,125,125,125,125,125,-5,125,125,125,125,125,125,125,-7,125,125,125,125,125,-1,125,-1,125,125,-1,125,125,125,125,125,-1,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,-1,125],
sm65=[0,126,-3,0,-4,0,-12,126,126,126,126,126,126,126,126,-5,126,126,126,126,126,126],
sm66=[0,-4,0,-4,0,-25,127],
sm67=[0,-4,0,-4,0,-25,128],
sm68=[0,-4,0,-4,0,-68,129],
sm69=[0,-4,0,-4,0,-69,130],
sm70=[0,131,-3,0,-4,0,-12,131,131,131,131,131,131,131,131,-5,131,131,131,131,131,131,131,-13,132,-1,133,-10,101,102,103,104,105,106,107,108,109,110],
sm71=[0,134,-3,0,-4,0,-12,134,134,134,134,134,134,134,134,-5,134,134,134,134,134,134,134],
sm72=[0,-1,135,2,-1,0,-2,3,4,0,-3,5,-66,17],
sm73=[0,-1,136,-2,0,-4,0],
sm74=[0,-1,137,-2,0,-4,0],
sm75=[0,-1,138,138,-1,0,-2,138,138,0,-3,138,-39,139,-2,140,-3,98,-5,99,100,-12,138],
sm76=[0,141,-3,0,-4,0,-12,141,141,141,141,141,141,141,141,-5,141,141,141,141,141,141,141,-13,141,-1,141,-10,141,141,141,141,141,141,141,141,141,141],
sm77=[0,-1,138,138,-1,0,-2,138,138,0,-3,138,-66,138],
sm78=[0,-4,0,-4,0,-39,142],
sm79=[0,143,144,-2,0,-4,0,-12,143,143,143,143,143,143,143,143,-5,143,143,143,143,143,143,143],
sm80=[0,-1,144,-2,0,-4,0],
sm81=[0,145,146,-2,0,-4,0,-12,145,145,145,145,145,145,145,145,-5,145,145,145,145,145,145,145],
sm82=[0,-1,146,-2,0,-4,0],
sm83=[0,-1,147,-2,0,-4,0],
sm84=[0,-1,148,-2,0,-4,0],
sm85=[0,-1,149,2,-1,0,-2,3,4,0,-3,5],
sm86=[0,-1,150,150,-1,0,-2,150,150,0,-3,150],
sm87=[0,151,-3,0,-4,0,-12,151,151,151,151,151,151,151,151,-5,151,151,151,151,151,151,151],
sm88=[0,152,-3,0,-4,0,-12,152,152,152,152,152,152,152,152,-5,152,152,152,152,152,152,152],
sm89=[0,143,-3,0,-4,0,-12,143,143,143,143,143,143,143,143,-5,143,143,143,143,143,143,143],
sm90=[0,145,-3,0,-4,0,-12,145,145,145,145,145,145,145,145,-5,145,145,145,145,145,145,145],
sm91=[0,153,-3,0,-4,0,-12,153,153,153,153,153,153,153,153,-5,153,153,153,153,153,153,153,-13,132,-1,133,-10,101,102,103,104,105,106,107,108,109,110],
sm92=[0,154,-3,0,-4,0,-12,154,154,154,154,154,154,154,154,-5,154,154,154,154,154,154,154],
sm93=[0,155,-3,0,-4,0,-12,155,155,155,155,155,155,155,155,-5,155,155,155,155,155,155,155,-13,132,-1,133,-10,101,102,103,104,105,106,107,108,109,110],
sm94=[0,156,-3,0,-4,0,-12,156,156,156,156,156,156,156,156,-5,156,156,156,156,156,156,156,-7,90,91,92,93,94,-1,95,-1,96,97,-1,98,-5,99,100,101,102,103,104,105,106,107,108,109,110],
sm95=[0,-4,0,-4,0,-32,42,43,44,45,46,47,48],
sm96=[0,157,-3,0,-4,0,-25,157,157,157,157,157,157],
sm97=[0,158,-3,0,-4,0,-12,158,158,158,158,-9,158,158,158,158,158,158],
sm98=[0,159,-3,0,-4,0,-12,159,159,159,159,159,159,159,159,-5,159,159,159,159,159,159],
sm99=[0,160,-3,0,-4,0,-12,160,160,160,160,160,160,160,160,-5,160,160,160,160,160,160],
sm100=[0,161,-3,0,-4,0,-12,161,161,161,161,161,161,161,161,-5,161,161,161,161,161,161,161],
sm101=[0,162,-3,0,-4,0,-12,162,162,162,162,162,162,162,162,-5,162,162,162,162,162,162,162,-13,162,-1,162,-10,162,162,162,162,162,162,162,162,162,162],
sm102=[0,163,-3,0,-4,0,-12,163,163,163,163,163,163,163,163,-5,163,163,163,163,163,163,163,-13,163,-1,163,-10,163,163,163,163,163,163,163,163,163,163],
sm103=[0,164,-3,0,-4,0,-12,164,164,164,164,164,164,164,164,-5,164,164,164,164,164,164,164,-13,164,-1,164,-10,164,164,164,164,164,164,164,164,164,164],
sm104=[0,165,-3,0,-4,0,-12,165,165,165,165,165,165,165,165,-5,165,165,165,165,165,165,165,-13,165,-1,165,-10,165,165,165,165,165,165,165,165,165,165],
sm105=[0,166,-3,0,-4,0,-12,166,166,166,166,166,166,166,166,-5,166,166,166,166,166,166,166,-13,166,-1,166,-10,166,166,166,166,166,166,166,166,166,166],
sm106=[0,-1,167,-2,0,-4,0,-44,168],
sm107=[0,-1,169,-2,0,-4,0,-44,170],
sm108=[0,-1,171,171,-1,0,-2,171,171,0,-3,171,-66,171],
sm109=[0,172,-3,0,-4,0,-12,172,172,172,172,172,172,172,172,-5,172,172,172,172,172,172,172,-13,172,-1,172,-3,173,174,175,176,177,-2,172,172,172,172,172,172,172,172,172,172],
sm110=[0,178,-3,0,-4,0,-12,178,178,178,178,178,178,178,178,-5,178,178,178,178,178,178,178,-13,178,-1,178,-3,179,180,181,182,-3,178,178,178,178,178,178,178,178,178,178],
sm111=[0,183,-3,0,-4,0,-12,183,183,183,183,183,183,183,183,-5,183,183,183,183,183,183,183,-13,183,-1,183,-3,183,183,183,183,-3,183,183,183,183,183,183,183,183,183,183],
sm112=[0,184,-3,0,-4,0,-12,184,184,184,184,184,184,184,184,-5,184,184,184,184,184,184,184],
sm113=[0,185,-3,0,-4,0,-12,185,185,185,185,185,185,185,185,-5,185,185,185,185,185,185,185],
sm114=[0,186,-3,0,-4,0,-12,186,186,186,186,186,186,186,186,-5,186,186,186,186,186,186,186,-13,132,-1,133,-10,101,102,103,104,105,106,107,108,109,110],
sm115=[0,187,-3,0,-4,0,-12,187,187,187,187,187,187,187,187,-5,187,187,187,187,187,187,187],
sm116=[0,188,-3,0,-4,0,-31,188],
sm117=[0,-1,189,-2,0,-4,0],
sm118=[0,-1,190,-2,0,-4,0],
sm119=[0,191,-3,0,-4,0,-12,191,191,191,191,191,191,191,191,-5,191,191,191,191,191,191,191,-13,191,-1,191,-10,191,191,191,191,191,191,191,191,191,191],
sm120=[0,-1,192,-2,0,-4,0],
sm121=[0,-1,193,-2,0,-4,0],
sm122=[0,194,-3,0,-4,0,-12,194,194,194,194,194,194,194,194,-5,194,194,194,194,194,194,194,-13,194,-1,194,-10,194,194,194,194,194,194,194,194,194,194],
sm123=[0,-1,195,195,-1,0,-2,195,195,0,-3,195],
sm124=[0,196,-3,0,-4,0,-12,196,196,196,196,196,196,196,196,-5,196,196,196,196,196,196,196],
sm125=[0,197,-3,0,-4,0,-12,197,197,197,197,197,197,197,197,-5,197,197,197,197,197,197,197,-13,197,-1,197,-10,197,197,197,197,197,197,197,197,197,197],
sm126=[0,198,-3,0,-4,0,-12,198,198,198,198,198,198,198,198,-5,198,198,198,198,198,198,198,-13,198,-1,198,-10,198,198,198,198,198,198,198,198,198,198],

    // Symbol Lookup map
    lu = new Map([[1,1],[2,2],[4,3],[8,4],[16,5],[32,6],[64,7],[128,8],[256,9],[512,10],[3,11],[264,12],[200,13],[201,14],["/",15],["?",16],[":",17],["f",18],["filter",19],["Filter",20],["FILTER",21],["&&",22],["AND",23],["And",24],["and",25],["||",26],["OR",27],["Or",28],["or",29],["NOT",30],["Not",31],["not",32],["!",33],["(",34],[")",35],["|",36],["s",37],["sort",38],["SORT",39],["Sort",40],[",",41],["created",42],["CREATED",43],["modifier",44],["MODIFIED",45],["size",46],["SIZE",47],["#",48],["is",49],["equals",50],["=",51],["that",52],["greater",53],["than",54],[">",55],["less",56],["<",57],["lesser",58],[null,2],["from",60],["to",61],["-",62],["TO",63],["To",64],["through",65],["on",66],["date",67],["DES",68],["des",69],["descending",70],["DESCENDING",71],["down",72],["ASC",73],["asc",74],["ascending",75],["ASCENDING",76],["up",77],["\"",78],["'",79],["*",80],["\\",82]]),

    //Reverse Symbol Lookup map
    rlu = new Map([[1,1],[2,2],[3,4],[4,8],[5,16],[6,32],[7,64],[8,128],[9,256],[10,512],[11,3],[12,264],[13,200],[14,201],[15,"/"],[16,"?"],[17,":"],[18,"f"],[19,"filter"],[20,"Filter"],[21,"FILTER"],[22,"&&"],[23,"AND"],[24,"And"],[25,"and"],[26,"||"],[27,"OR"],[28,"Or"],[29,"or"],[30,"NOT"],[31,"Not"],[32,"not"],[33,"!"],[34,"("],[35,")"],[36,"|"],[37,"s"],[38,"sort"],[39,"SORT"],[40,"Sort"],[41,","],[42,"created"],[43,"CREATED"],[44,"modifier"],[45,"MODIFIED"],[46,"size"],[47,"SIZE"],[48,"#"],[49,"is"],[50,"equals"],[51,"="],[52,"that"],[53,"greater"],[54,"than"],[55,">"],[56,"less"],[57,"<"],[58,"lesser"],[2,null],[60,"from"],[61,"to"],[62,"-"],[63,"TO"],[64,"To"],[65,"through"],[66,"on"],[67,"date"],[68,"DES"],[69,"des"],[70,"descending"],[71,"DESCENDING"],[72,"down"],[73,"ASC"],[74,"asc"],[75,"ascending"],[76,"ASCENDING"],[77,"up"],[78,"\""],[79,"'"],[80,"*"],[82,"\\"]]),

    // States 
    state = [sm0,
sm1,
sm2,
sm3,
sm4,
sm5,
sm6,
sm7,
sm8,
sm9,
sm10,
sm11,
sm12,
sm12,
sm13,
sm14,
sm15,
sm15,
sm15,
sm15,
sm16,
sm17,
sm18,
sm19,
sm20,
sm21,
sm22,
sm23,
sm24,
sm25,
sm26,
sm27,
sm28,
sm29,
sm30,
sm31,
sm32,
sm33,
sm34,
sm35,
sm36,
sm37,
sm38,
sm39,
sm39,
sm39,
sm40,
sm41,
sm42,
sm43,
sm44,
sm45,
sm45,
sm45,
sm45,
sm46,
sm47,
sm47,
sm48,
sm40,
sm40,
sm49,
sm49,
sm49,
sm49,
sm50,
sm51,
sm51,
sm52,
sm53,
sm53,
sm54,
sm55,
sm55,
sm56,
sm57,
sm57,
sm57,
sm57,
sm58,
sm59,
sm60,
sm60,
sm60,
sm60,
sm61,
sm62,
sm63,
sm64,
sm46,
sm46,
sm46,
sm46,
sm46,
sm46,
sm46,
sm46,
sm65,
sm65,
sm65,
sm65,
sm66,
sm67,
sm68,
sm69,
sm70,
sm71,
sm72,
sm73,
sm74,
sm75,
sm76,
sm76,
sm77,
sm77,
sm78,
sm79,
sm80,
sm81,
sm82,
sm83,
sm84,
sm85,
sm86,
sm86,
sm87,
sm88,
sm89,
sm89,
sm89,
sm89,
sm89,
sm90,
sm90,
sm90,
sm90,
sm90,
sm91,
sm92,
sm93,
sm80,
sm82,
sm94,
sm95,
sm96,
sm96,
sm96,
sm96,
sm97,
sm97,
sm97,
sm97,
sm98,
sm99,
sm99,
sm100,
sm89,
sm90,
sm101,
sm102,
sm103,
sm104,
sm105,
sm105,
sm106,
sm107,
sm108,
sm109,
sm110,
sm111,
sm111,
sm112,
sm113,
sm114,
sm115,
sm116,
sm117,
sm118,
sm119,
sm120,
sm121,
sm121,
sm121,
sm121,
sm121,
sm122,
sm85,
sm123,
sm123,
sm123,
sm123,
sm124,
sm125,
sm126],

/************ Functions *************/

    max = Math.max, min = Math.min,

    //Error Functions
    e = (tk,r,o,l,p)=>{if(l.END)l.throw("Unexpected end of input");else if(l.ty & (264)) l.throw(`Unexpected space character within input "${p.slice(l)}" `) ; else l.throw(`Unexpected token [${l.tx}]`)}, 
    eh = [e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e],

    //Empty Function
    nf = ()=>-1, 

    //Environment Functions
    
redv = (ret, fn, plen, ln, t, e, o, l, s) => {        ln = max(o.length - plen, 0);        const slice = o.slice(-plen);        o.length = ln + 1;        o[ln] = fn(slice, e, l, s, o, plen);        return ret;    },
rednv = (ret, Fn, plen, ln, t, e, o, l, s) => {        ln = max(o.length - plen, 0);        const slice = o.slice(-plen);        o.length = ln + 1;        o[ln] = new Fn(slice, e, l, s, o, plen);        return ret;    },
redn = (ret, plen, t, e, o) => {        if (plen > 0) {            let ln = max(o.length - plen, 0);            o[ln] = o[o.length - 1];            o.length = ln + 1;        }        return ret;    },
shftf = (ret, fn, t, e, o, l, s) => (fn(o, e, l, s), ret),
C20_query_body=function (sym){this.container = sym[0];this.filter = sym[1];this.sort = sym[2];},
C21_query_body=function (sym){this.container = null;this.filter = sym[0];this.sort = sym[1];},
C22_query_body=function (sym){this.container = sym[0];this.filter = null;this.sort = sym[1];},
C23_query_body=function (sym){this.container = sym[0];this.filter = sym[1];this.sort = null;},
C24_query_body=function (sym){this.container = null;this.filter = null;this.sort = sym[0];},
C25_query_body=function (sym){this.container = null;this.filter = sym[0];this.sort = null;},
C26_query_body=function (sym){this.container = sym[0];this.filter = null;this.sort = null;},
C27_query_body=function (){this.container = null;this.filter = null;this.sort = null;},
R30_container_identifier_list=sym=>(((sym[1] !== null) ? sym[0].push(sym[1]) : null,sym[0])),
R31_container_identifier_list=sym=>(sym[0] !== null) ? [sym[0]] : [],
C40_container_clause=function (sym){this.containers = [{ids : [""]},...sym[1]];this.id = sym[2];if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
C41_container_clause=function (sym){this.containers = [{ids : [""]},...sym[0]];this.id = sym[1];if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
C42_container_clause=function (sym){this.containers = [{ids : [""]}];this.id = sym[1];if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
C43_container_clause=function (sym){this.containers = [{ids : [""]},...sym[1]];this.id = null;if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
C44_container_clause=function (sym){this.containers = [{ids : [""]}];this.id = sym[0];if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
C45_container_clause=function (sym){this.containers = [{ids : [""]},...sym[0]];this.id = null;if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
C46_container_clause=function (){this.containers = [{ids : [""]}];this.id = null;if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
R50_container_identifier=sym=>sym[0],
R70_filter_clause=sym=>sym[1],
R71_filter_clause=()=>null,
C90_and_expression=function (sym){this.type = "AND";this.left = sym[0];this.right = sym[2];},
C100_or_expression=function (sym){this.type = "OR";this.left = sym[0];this.right = sym[2];},
C110_not_expression=function (sym){this.type = "NOT";this.left = sym[1];},
C120_wrapped_expression=function (sym){this.type = "MATCH";this.value = sym[0];},
R140_stetement_list=sym=>(((sym[1] !== null) ? sym[0].push(sym[2]) : null,sym[0])),
C180_created_statement=function (sym){this.type = "CREATED";this.val = sym[1];this.order = sym[2] || 1;},
C181_created_statement=function (sym){this.type = "CREATED";this.val = null;this.order = sym[1] || 1;},
C182_created_statement=function (sym){this.type = "CREATED";this.val = sym[1];this.order = 1;},
C183_created_statement=function (){this.type = "CREATED";this.val = null;this.order = 1;},
C200_modified_statement=function (sym){this.type = "MODIFIED";this.val = sym[1];this.order = sym[2] || 1;},
C201_modified_statement=function (sym){this.type = "MODIFIED";this.val = null;this.order = sym[1] || 1;},
C202_modified_statement=function (sym){this.type = "MODIFIED";this.val = sym[1];this.order = 1;},
C203_modified_statement=function (){this.type = "MODIFIED";this.val = null;this.order = 1;},
C220_size_statement=function (sym){this.type = "SIZE";this.val = sym[1];this.order = sym[2] || 1;},
C221_size_statement=function (sym){this.type = "SIZE";this.val = sym[1];this.order = 1;},
C230_tag_statement=function (sym){this.type = "TAG";this.id = sym[1];this.val = sym[2];this.order = sym[3] || 1;},
C231_tag_statement=function (sym){this.type = "TAG";this.id = sym[1];this.val = null;this.order = sym[2] || 1;},
C232_tag_statement=function (sym){this.type = "TAG";this.id = sym[1];this.val = sym[2];this.order = 1;},
C233_tag_statement=function (sym){this.type = "TAG";this.id = sym[1];this.val = null;this.order = 1;},
R270_comparison_expression=sym=>({type : "EQUALS_QUANTITATIVE",val : parseFloat(sym[1])}),
R271_comparison_expression=sym=>({type : "EQUALS_QUALITATIVE",val : sym[1]}),
R272_comparison_expression=sym=>({type : "GREATERTHAN",val : parseFloat(sym[1])}),
R273_comparison_expression=sym=>({type : "LESSTHAN",val : parseFloat(sym[1])}),
R310_range_expression=sym=>({type : "RANGE",val : [sym[1],sym[2]].map(parseFloat).sort((a,b)=>a < b ? -1 : 1)}),
R311_range_expression=sym=>({type : "RANGE",val : [sym[1]].map(parseFloat).sort((a,b)=>a < b ? -1 : 1)}),
R360_date_expression=sym=>({type : "DATE",val : [sym[1],sym[2]].map(d=>new Date(d).valueOf()).sort((a,b)=>a < b ? -1 : 1)}),
R361_date_expression=sym=>({type : "DATE",val : [sym[1]].map(d=>new Date(d).valueOf()).sort((a,b)=>a < b ? -1 : 1)}),
R390_order=()=>-1,
R391_order=()=>1,
C410_identifier=function (sym){this.ids = sym[0];},
R440_string_data_val_list=sym=>sym[0] + sym[1],
R441_string_data_val_list=sym=>sym[0] + "",
R450_string_data=sym=>[sym[0],...sym[1]].join("").trim(),
R451_string_data=sym=>[sym[0]].join("").trim(),

    //Sparse Map Lookup
    lsm = (index, map) => {    if (map[0] == 0xFFFFFFFF) return map[index + 1];    for (let i = 1, ind = 0, l = map.length, n = 0; i < l && ind <= index; i++) {        if (ind !== index) {            if ((n = map[i]) > -1) ind++;            else ind += -n;        } else return map[i];    }    return -1;},

    //State Action Functions
    state_funct = [(...v)=>(redn(2051,0,...v)),
e=>78,
e=>74,
e=>70,
e=>66,
e=>26,
e=>86,
e=>90,
e=>94,
e=>98,
e=>102,
e=>110,
e=>114,
e=>118,
e=>122,
e=>126,
e=>58,
(...v)=>redn(5,1,...v),
(...v)=>redn(1031,1,...v),
(...v)=>rednv(2055,C26_query_body,1,0,...v),
(...v)=>rednv(2055,C25_query_body,1,0,...v),
(...v)=>rednv(2055,C24_query_body,1,0,...v),
(...v)=>rednv(4103,C46_container_clause,1,0,...v),
(...v)=>rednv(4103,C45_container_clause,1,0,...v),
(...v)=>rednv(4103,C44_container_clause,1,0,...v),
e=>158,
(...v)=>redv(3079,R31_container_identifier_list,1,0,...v),
(...v)=>rednv(41991,C410_identifier,1,0,...v),
(...v)=>redv(40967,R31_container_identifier_list,1,0,...v),
(...v)=>redn(43015,1,...v),
(...v)=>redn(47111,1,...v),
(...v)=>redv(46087,R451_string_data,1,0,...v),
e=>182,
e=>186,
(...v)=>redn(50183,1,...v),
(...v)=>redv(7175,R71_filter_clause,1,0,...v),
e=>206,
e=>210,
e=>214,
e=>218,
e=>222,
e=>266,
e=>270,
e=>278,
e=>282,
e=>290,
e=>294,
e=>298,
e=>238,
e=>242,
(...v)=>redn(6151,1,...v),
e=>302,
e=>306,
e=>310,
e=>314,
(...v)=>redv(15367,R71_filter_clause,1,0,...v),
(...v)=>redn(13319,1,...v),
e=>326,
e=>330,
e=>334,
e=>338,
(...v)=>rednv(2059,C23_query_body,2,0,...v),
(...v)=>rednv(2059,C22_query_body,2,0,...v),
(...v)=>rednv(2059,C21_query_body,2,0,...v),
(...v)=>rednv(4107,C43_container_clause,2,0,...v),
(...v)=>rednv(4107,C42_container_clause,2,0,...v),
(...v)=>rednv(4107,C41_container_clause,2,0,...v),
(...v)=>redv(3083,R30_container_identifier_list,2,0,...v),
(...v)=>redv(5131,R50_container_identifier,2,0,...v),
(...v)=>redv(40971,R30_container_identifier_list,2,0,...v),
(...v)=>redv(46091,R450_string_data,2,0,...v),
(...v)=>redv(45063,R441_string_data_val_list,1,0,...v),
(...v)=>redn(48135,1,...v),
(...v)=>redv(7179,R70_filter_clause,2,0,...v),
(...v)=>redn(9223,1,...v),
e=>358,
e=>362,
e=>366,
e=>370,
(...v)=>redn(10247,1,...v),
e=>374,
e=>378,
e=>382,
e=>386,
(...v)=>redn(11271,1,...v),
(...v)=>rednv(12295,C120_wrapped_expression,1,0,...v),
(...v)=>redn(12295,1,...v),
(...v)=>redn(16391,1,...v),
(...v)=>rednv(18439,C183_created_statement,1,0,...v),
e=>442,
e=>454,
e=>458,
e=>462,
e=>470,
e=>466,
e=>474,
e=>478,
e=>486,
e=>494,
e=>498,
e=>510,
e=>514,
e=>518,
e=>522,
e=>526,
e=>530,
e=>534,
e=>538,
e=>542,
e=>546,
(...v)=>redn(17415,1,...v),
(...v)=>rednv(20487,C203_modified_statement,1,0,...v),
(...v)=>redn(19463,1,...v),
e=>562,
e=>566,
(...v)=>redn(21511,1,...v),
(...v)=>redn(6155,2,...v),
(...v)=>redv(15371,R70_filter_clause,2,0,...v),
e=>574,
(...v)=>redv(14343,R31_container_identifier_list,1,0,...v),
(...v)=>redn(13323,2,...v),
(...v)=>rednv(2063,C20_query_body,3,0,...v),
(...v)=>rednv(4111,C40_container_clause,3,0,...v),
(...v)=>redv(45067,R440_string_data_val_list,2,0,...v),
(...v)=>redv(49163,R70_filter_clause,2,0,...v),
(...v)=>rednv(11275,C110_not_expression,2,0,...v),
e=>610,
(...v)=>redn(8199,1,...v),
e=>614,
e=>618,
(...v)=>rednv(18443,C182_created_statement,2,0,...v),
e=>626,
e=>630,
(...v)=>rednv(18443,C181_created_statement,2,0,...v),
e=>634,
e=>642,
e=>646,
(...v)=>redn(24583,1,...v),
e=>658,
e=>662,
(...v)=>redv(27655,R50_container_identifier,1,0,...v),
e=>666,
(...v)=>redn(37895,1,...v),
(...v)=>redn(25607,1,...v),
(...v)=>redn(38919,1,...v),
(...v)=>redn(26631,1,...v),
e=>670,
(...v)=>redn(28679,1,...v),
e=>682,
(...v)=>redn(32775,1,...v),
(...v)=>redv(39943,R390_order,1,0,...v),
(...v)=>redv(39943,R391_order,1,0,...v),
(...v)=>rednv(20491,C202_modified_statement,2,0,...v),
(...v)=>rednv(20491,C201_modified_statement,2,0,...v),
(...v)=>rednv(22539,C221_size_statement,2,0,...v),
(...v)=>rednv(23563,C233_tag_statement,2,0,...v),
(...v)=>rednv(9231,C90_and_expression,3,0,...v),
(...v)=>rednv(10255,C100_or_expression,3,0,...v),
(...v)=>redv(12303,R70_filter_clause,3,0,...v),
(...v)=>redv(44047,R70_filter_clause,3,0,...v),
(...v)=>rednv(18447,C180_created_statement,3,0,...v),
(...v)=>redv(27659,R270_comparison_expression,2,0,...v),
(...v)=>redv(27659,R271_comparison_expression,2,0,...v),
(...v)=>redv(27659,R272_comparison_expression,2,0,...v),
(...v)=>redv(27659,R273_comparison_expression,2,0,...v),
(...v)=>redv(27659,R70_filter_clause,2,0,...v),
(...v)=>redn(25611,2,...v),
e=>706,
(...v)=>redn(26635,2,...v),
e=>710,
(...v)=>redn(24587,2,...v),
(...v)=>redv(31755,R311_range_expression,2,0,...v),
e=>722,
e=>726,
e=>730,
e=>734,
e=>738,
(...v)=>redv(36875,R361_date_expression,2,0,...v),
e=>750,
e=>754,
e=>758,
e=>762,
(...v)=>redn(33799,1,...v),
(...v)=>rednv(20495,C200_modified_statement,3,0,...v),
(...v)=>rednv(22543,C220_size_statement,3,0,...v),
(...v)=>rednv(23567,C232_tag_statement,3,0,...v),
(...v)=>rednv(23567,C231_tag_statement,3,0,...v),
(...v)=>redv(14351,R140_stetement_list,3,0,...v),
(...v)=>redn(25615,3,...v),
(...v)=>redn(26639,3,...v),
(...v)=>redv(31759,R310_range_expression,3,0,...v),
e=>770,
(...v)=>redn(29703,1,...v),
(...v)=>redv(36879,R360_date_expression,3,0,...v),
(...v)=>redn(34823,1,...v),
(...v)=>rednv(23571,C230_tag_statement,4,0,...v),
(...v)=>redv(30731,R70_filter_clause,2,0,...v),
(...v)=>redv(35851,R70_filter_clause,2,0,...v)],

    //Goto Lookup Functions
    goto = [v=>lsm(v,gt0),
nf,
nf,
v=>lsm(v,gt1),
v=>lsm(v,gt2),
nf,
v=>lsm(v,gt3),
v=>lsm(v,gt4),
nf,
nf,
v=>lsm(v,gt5),
nf,
nf,
nf,
nf,
v=>lsm(v,gt6),
nf,
nf,
nf,
nf,
v=>lsm(v,gt7),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt8),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt9),
nf,
nf,
v=>lsm(v,gt10),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt11),
nf,
nf,
nf,
nf,
v=>lsm(v,gt12),
nf,
nf,
nf,
nf,
v=>lsm(v,gt13),
v=>lsm(v,gt14),
v=>lsm(v,gt15),
v=>lsm(v,gt16),
v=>lsm(v,gt17),
nf,
nf,
nf,
v=>lsm(v,gt18),
v=>lsm(v,gt19),
nf,
nf,
nf,
nf,
v=>lsm(v,gt20),
nf,
nf,
v=>lsm(v,gt21),
nf,
nf,
v=>lsm(v,gt22),
nf,
nf,
v=>lsm(v,gt23),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt24),
v=>lsm(v,gt25),
v=>lsm(v,gt26),
v=>lsm(v,gt27),
v=>lsm(v,gt28),
v=>lsm(v,gt29),
v=>lsm(v,gt30),
v=>lsm(v,gt31),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt32),
nf,
v=>lsm(v,gt33),
nf,
nf,
v=>lsm(v,gt34),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt35),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt36),
nf,
v=>lsm(v,gt37),
nf,
nf,
v=>lsm(v,gt38),
v=>lsm(v,gt39),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt40),
v=>lsm(v,gt41),
nf,
nf,
nf,
nf,
v=>lsm(v,gt42),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt43),
nf,
nf,
nf,
nf,
nf,
nf,
nf];

function getToken(l, SYM_LU) {
    if (l.END) return 0; /*$eof*/

    switch (l.ty) {
        case 2:
            //*
            if (SYM_LU.has(l.tx)) return 14;
            /*/
                console.log(l.tx, SYM_LU.has(l.tx), SYM_LU.get(l.tx))
                if (SYM_LU.has(l.tx)) return SYM_LU.get(l.tx);
            //*/
            return 2;
        case 1:
            return 1;
        case 4:
            return 3;
        case 256:
            return 9;
        case 8:
            return 4;
        case 512:
            return 10;
        default:
            return SYM_LU.get(l.tx) || SYM_LU.get(l.ty);
    }
}

/************ Parser *************/

function parser(l, e = {}) {

    fn = e.functions;

    l.IWS = false;
    l.PARSE_STRING = true;

    if (symbols.length > 0) {
        symbols.forEach(s => { l.addSymbol(s) });
        l.tl = 0;
        l.next();
    }

    const o = [],
        ss = [0, 0];

    let time = 1000000,
        RECOVERING = 100,
        RESTARTED = true,
        tk = getToken(l, lu),
        p = l.copy(),
        sp = 1,
        len = 0,
        reduceStack = (e.reduceStack = []),
        ROOT = 10000,
        off = 0;

    outer:

        while (time-- > 0) {

            const fn = lsm(tk, state[ss[sp]]) || 0;

            let r,
                gt = -1;

            if (fn == 0) {
                /*Ignore the token*/
                tk = getToken(l.next(), lu);
                continue;
            }

            if (fn > 0) {
                r = state_funct[fn - 1](tk, e, o, l, ss[sp - 1]);
            } else {

                if (tk == 14) {
                    tk = lu.get(l.tx);
                    continue;
                }

                if (l.ty == 8 && l.tl > 1) {
                    // Make sure that special tokens are not getting in the way
                    l.tl = 0;
                    // This will skip the generation of a custom symbol
                    l.next(l, false);

                    if (l.tl == 1)
                        continue;
                }

                if (RECOVERING > 1 && !l.END) {

                    if (tk !== lu.get(l.ty)) {
                        tk = lu.get(l.ty);
                        continue;
                    }

                    if (tk !== 13) {
                        tk = 13;
                        RECOVERING = 1;
                        continue;
                    }
                }

                tk = getToken(l, lu);

                const recovery_token = eh[ss[sp]](tk, e, o, l, p, ss[sp], (lex) => getToken(lex, lu));

                if (RECOVERING > 0 && recovery_token >= 0) {
                    RECOVERING = -1; /* To prevent infinite recursion */
                    tk = recovery_token;
                    l.tl = 0; /*reset current token */
                    continue;
                }
            }

            switch (r & 3) {
                case 0:
                    /* ERROR */

                    if (tk == "$eof")
                        l.throw("Unexpected end of input");

                    l.throw(`Unexpected token [${RECOVERING ? l.next().tx : l.tx}]`);
                    return [null];

                case 1:
                    /* ACCEPT */
                    break outer;

                case 2:

                    /*SHIFT */
                    o.push(l.tx);
                    ss.push(off, r >> 2);
                    sp += 2;
                    l.next();
                    off = l.off;
                    tk = getToken(l, lu);
                    RECOVERING++;
                    break;

                case 3:
                    /* REDUCE */
                    RESTARTED = true;

                    len = (r & 0x3FC) >> 1;

                    ss.length -= len;
                    sp -= len;
                    gt = goto[ss[sp]](r >> 10);

                    if (gt < 0)
                        l.throw("Invalid state reached!");

                    if (reduceStack.length > 0) {
                        let i = reduceStack.length - 1;
                        while (i > -1) {
                            const item = reduceStack[i--];

                            if (item.index == sp) {
                                item.action(output);
                            } else if (item.index > sp) {
                                reduceStack.length--;
                            } else {
                                break;
                            }
                        }
                    }

                    ss.push(off, gt);
                    sp += 2;
                    break;
            }
        }
    return o[0];
}; export default parser;