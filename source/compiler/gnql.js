let fn = {}; const 
/************** Maps **************/

    /* Symbols To Inject into the Lexer */
    symbols = ["&&","||"],

    /* Goto lookup maps */
    gt0 = [0,-1,1,2,6,3,8,22,4,-6,27,-1,5,-15,9,7,10,-1,12,11,-2,14],
gt1 = [0,-6,22,32,-6,27,-1,33],
gt2 = [0,-14,27,-1,34],
gt3 = [0,-5,36,-26,9,35,10,-1,12,11,-2,14],
gt4 = [0,-34,38,-1,12,11,-2,14],
gt5 = [0,-35,39,-2,40,42,41],
gt6 = [0,-9,45,46,47,-1,48,-3,55,64,60,67,61,70,62,63,-6,54,9,59,10,-1,12,11,-2,14],
gt7 = [0,-15,77,-1,78,64,60,67,61,70,62,63],
gt8 = [0,-14,27,-1,83],
gt9 = [0,-38,84,42,41],
gt10 = [0,-40,85],
gt11 = [0,-13,94,-3,55,64,60,67,61,70,62,63,-6,54,9,59,10,-1,12,11,-2,14],
gt12 = [0,-13,95,-3,55,64,60,67,61,70,62,63,-6,54,9,59,10,-1,12,11,-2,14],
gt13 = [0,-13,96,-3,55,64,60,67,61,70,62,63,-6,54,9,59,10,-1,12,11,-2,14],
gt14 = [0,-13,97,-3,55,64,60,67,61,70,62,63,-6,54,9,59,10,-1,12,11,-2,14],
gt15 = [0,-8,98,99,46,47,-1,48,-3,55,64,60,67,61,70,62,63,-6,54,9,59,10,-1,12,11,-2,14],
gt16 = [0,-32,9,100,10,-1,12,11,-2,14],
gt17 = [0,-32,9,101,10,-1,12,11,-2,14],
gt18 = [0,-32,9,102,10,-1,12,11,-2,14],
gt19 = [0,-27,103,106,107,104],
gt20 = [0,-27,118,106,107,119],
gt21 = [0,-27,120,106,107,121],
gt22 = [0,-32,9,123,10,-1,12,11,-2,14],
gt23 = [0,-9,124,46,47,-1,48,-3,55,64,60,67,61,70,62,63,-6,54,9,59,10,-1,12,11,-2,14],
gt24 = [0,-9,125,46,47,-1,48,-3,55,64,60,67,61,70,62,63,-6,54,9,59,10,-1,12,11,-2,14],
gt25 = [0,-9,126,46,47,-1,48,-3,55,64,60,67,61,70,62,63,-6,54,9,59,10,-1,12,11,-2,14],
gt26 = [0,-9,127,46,47,-1,48,-3,55,64,60,67,61,70,62,63,-6,54,9,59,10,-1,12,11,-2,14],
gt27 = [0,-10,128,47,-1,48,-3,55,64,60,67,61,70,62,63,-6,54,9,59,10,-1,12,11,-2,14],
gt28 = [0,-10,129,47,-1,48,-3,55,64,60,67,61,70,62,63,-6,54,9,59,10,-1,12,11,-2,14],
gt29 = [0,-10,130,47,-1,48,-3,55,64,60,67,61,70,62,63,-6,54,9,59,10,-1,12,11,-2,14],
gt30 = [0,-10,131,47,-1,48,-3,55,64,60,67,61,70,62,63,-6,54,9,59,10,-1,12,11,-2,14],
gt31 = [0,-12,133,-14,134,106,107,135],
gt32 = [0,-28,106,107,142],
gt33 = [0,-25,144,143],
gt34 = [0,-28,106,107,148],
gt35 = [0,-28,106,107,149],
gt36 = [0,-17,150,64,60,67,61,70,62,63],
gt37 = [0,-27,134,106,107,135],
gt38 = [0,-32,9,151,10,-1,12,11,-2,14],
gt39 = [0,-28,106,107,152],

    // State action lookup maps
    sm0=[0,1,2,3,-1,0,4,5,6,7,0,-3,8,-2,9,-1,10,11,12,-19,13,14,15,16,-23,17],
sm1=[0,18,-3,0,-4,0],
sm2=[0,19,-3,0,-4,0],
sm3=[0,20,-3,0,-4,0,-6,9,-1,10,11,12,-19,13,14,15,16],
sm4=[0,21,-3,0,-4,0,-30,13,14,15,16],
sm5=[0,22,-3,0,-4,0],
sm6=[0,23,2,3,-1,0,4,5,6,7,0,-3,8,-2,23,-1,23,23,23,-19,23,23,23,23,-23,17],
sm7=[0,24,-3,0,-4,0,-5,25,24,-1,24,24,24,-19,24,24,24,24],
sm8=[0,26,26,26,-1,0,26,26,26,26,0,-3,26,-2,26,-1,26,26,26,-19,26,26,26,26,-23,26],
sm9=[0,27,2,3,-1,0,4,5,6,7,0,-3,8,-1,27,27,-1,27,27,27,27,27,27,27,27,27,27,27,-4,27,27,27,27,-1,27,-1,27,27,27,27,27,-10,27,27,27,27,27,27,27,27,27,27,27,27,17],
sm10=[0,28,28,28,-1,0,28,28,28,28,0,-3,28,-1,28,28,-1,28,28,28,28,28,28,28,28,28,28,28,-4,28,28,28,28,-1,28,-1,28,28,28,28,28,-10,28,28,28,28,28,28,28,28,28,28,28,28,28],
sm11=[0,29,29,29,-1,0,29,29,29,29,0,-3,29,-1,29,29,-1,29,29,29,29,29,29,29,29,29,29,29,-4,29,29,29,29,-1,29,-1,29,29,29,29,29,-10,29,29,29,29,29,29,29,29,29,29,29,29,29],
sm12=[0,30,30,30,-1,0,30,30,30,30,0,-3,30,-1,30,30,-1,30,30,30,30,30,30,30,30,30,30,30,-4,30,30,30,30,-1,30,-1,30,30,30,30,30,-10,30,30,30,30,30,30,30,30,30,30,30,30,30],
sm13=[0,31,2,3,-1,32,4,5,6,7,0,-3,8,-1,31,31,-1,31,31,31,31,31,31,31,31,31,31,31,-4,31,31,31,31,-1,31,-1,31,31,31,31,31,-10,31,31,31,31,31,31,31,31,31,31,31,31,31,-1,33],
sm14=[0,34,34,34,-1,34,34,34,34,34,0,-3,34,-1,34,34,-1,34,34,34,34,34,34,34,34,34,34,34,-4,34,34,34,34,-1,34,-1,34,34,34,34,34,-10,34,34,34,34,34,34,34,34,34,34,34,34,34,-1,34],
sm15=[0,35,35,35,-1,35,35,35,35,35,0,-3,35,-1,35,35,-1,35,35,35,35,35,35,35,35,35,35,35,-4,35,35,35,35,-1,35,-1,35,35,35,35,35,-10,35,35,35,35,35,35,35,35,35,35,35,35,35,-1,35],
sm16=[0,36,2,3,-1,0,4,5,6,7,0,-3,8,-15,37,38,39,40,-4,41,-1,42,36,36,36,36,-1,43,44,45,46,47,48,-14,49,50,17],
sm17=[0,51,51,51,-1,0,51,51,51,51,0,-3,51,-3,52,-11,51,51,51,51,-4,51,-1,51,51,51,51,51,-1,51,51,51,51,51,51,-14,51,51,51],
sm18=[0,51,51,51,-1,0,51,51,51,51,0,-3,51,-3,53,-11,51,51,51,51,-4,51,-1,51,51,51,51,51,-1,51,51,51,51,51,51,-14,51,51,51],
sm19=[0,51,51,51,-1,0,51,51,51,51,0,-3,51,-3,54,-11,51,51,51,51,-4,51,-1,51,51,51,51,51,-1,51,51,51,51,51,51,-14,51,51,51],
sm20=[0,51,51,51,-1,0,51,51,51,51,0,-3,51,-3,55,-11,51,51,51,51,-4,51,-1,51,51,51,51,51,-1,51,51,51,51,51,51,-14,51,51,51],
sm21=[0,56,-3,0,-4,0,-29,57,-5,43,44,45,46,47,48],
sm22=[0,58,-3,0,-4,0,-29,58,-5,58,58,58,58,58,58],
sm23=[0,58,-3,0,-4,0,-7,59,-21,58,-5,58,58,58,58,58,58],
sm24=[0,58,-3,0,-4,0,-7,60,-21,58,-5,58,58,58,58,58,58],
sm25=[0,58,-3,0,-4,0,-7,61,-21,58,-5,58,58,58,58,58,58],
sm26=[0,62,-3,0,-4,0,-30,13,14,15,16],
sm27=[0,63,-3,0,-4,0],
sm28=[0,64,-3,0,-4,0],
sm29=[0,65,-3,0,-4,0,-5,25,65,-1,65,65,65,-19,65,65,65,65],
sm30=[0,66,66,66,-1,0,66,66,66,66,0,-3,66,-2,66,-1,66,66,66,-19,66,66,66,66,-23,66],
sm31=[0,67,67,67,-1,0,67,67,67,67,0,-3,67,-2,67,-1,67,67,67,-19,67,67,67,67,-23,67],
sm32=[0,68,68,68,-1,0,68,68,68,68,0,-3,68,-1,68,68,-1,68,68,68,68,68,68,68,68,68,68,68,-4,68,68,68,68,-1,68,-1,68,68,68,68,68,-10,68,68,68,68,68,68,68,68,68,68,68,68,68],
sm33=[0,69,2,3,-1,32,4,5,6,7,0,-3,8,-1,69,69,-1,69,69,69,69,69,69,69,69,69,69,69,-4,69,69,69,69,-1,69,-1,69,69,69,69,69,-10,69,69,69,69,69,69,69,69,69,69,69,69,69,-1,33],
sm34=[0,70,70,70,-1,70,70,70,70,70,0,-3,70,-1,70,70,-1,70,70,70,70,70,70,70,70,70,70,70,-4,70,70,70,70,-1,70,-1,70,70,70,70,70,-10,70,70,70,70,70,70,70,70,70,70,70,70,70,-1,70],
sm35=[0,71,71,71,-1,71,71,71,71,71,0,-3,71,-1,71,71,-1,71,71,71,71,71,71,71,71,71,71,71,-4,71,71,71,71,-1,71,-1,71,71,71,71,71,-10,71,71,71,71,71,71,71,71,71,71,71,71,71,-1,71],
sm36=[0,-1,2,3,-1,0,4,5,6,7,0,-3,8],
sm37=[0,72,-3,0,-4,0,-30,72,72,72,72],
sm38=[0,73,-3,0,-4,0,-11,74,75,76,77,-13,73,-1,73,73,73,73],
sm39=[0,78,-3,0,-4,0,-11,78,78,78,78,79,80,81,82,-9,78,-1,78,78,78,78],
sm40=[0,83,-3,0,-4,0,-11,83,83,83,83,83,83,83,83,-9,83,-1,83,83,83,83],
sm41=[0,-1,2,3,-1,0,4,5,6,7,0,-3,8,-23,41,-1,42,-5,43,44,45,46,47,48,-14,49,50,17],
sm42=[0,-1,2,3,-1,0,4,5,6,7,0,-3,8,-15,37,38,39,40,-4,41,-1,42,-5,43,44,45,46,47,48,-14,49,50,17],
sm43=[0,84,-3,0,-4,0,-11,84,84,84,84,84,84,84,84,-9,84,-1,84,84,84,84],
sm44=[0,85,-3,0,-4,0,-11,85,85,85,85,85,85,85,85,-9,85,-1,85,85,85,85],
sm45=[0,-1,2,3,-1,0,4,5,6,7,0,-3,8,-53,17],
sm46=[0,86,-3,0,-4,0,-11,86,86,86,86,86,86,86,86,-9,86,-1,86,86,86,86],
sm47=[0,87,-3,0,-4,0,-11,87,87,87,87,87,87,87,87,-9,87,-1,87,87,87,87,87],
sm48=[0,88,89,-2,0,-4,0,-11,88,88,88,88,88,88,88,88,-9,88,-1,88,88,88,88,88,-10,90,91,92,93,94,95,96,97,98,99],
sm49=[0,100,100,-2,0,-4,0,-11,100,100,100,100,100,100,100,100,-9,100,-1,100,100,100,100,100,-10,100,100,100,100,100,100,100,100,100,100],
sm50=[0,101,89,-2,0,-4,0,-11,101,101,101,101,101,101,101,101,-9,101,-1,101,101,101,101,101,-10,90,91,92,93,94,95,96,97,98,99],
sm51=[0,102,102,-2,0,-4,0,-11,102,102,102,102,102,102,102,102,-9,102,-1,102,102,102,102,102,-10,102,102,102,102,102,102,102,102,102,102],
sm52=[0,103,89,-2,0,-4,0,-11,103,103,103,103,103,103,103,103,-9,103,-1,103,103,103,103,103,-10,90,91,92,93,94,95,96,97,98,99],
sm53=[0,104,104,-2,0,-4,0,-11,104,104,104,104,104,104,104,104,-9,104,-1,104,104,104,104,104,-10,104,104,104,104,104,104,104,104,104,104],
sm54=[0,105,105,105,-1,0,105,105,105,105,0,-3,105,-15,105,105,105,105,-4,105,-1,105,105,105,105,105,-1,105,105,105,105,105,105,-14,105,105,105],
sm55=[0,106,-3,0,-4,0,-34,107],
sm56=[0,108,-3,0,-4,0,-34,108],
sm57=[0,109,-3,0,-4,0,-29,109,-5,109,109,109,109,109,109],
sm58=[0,110,-3,0,-4,0],
sm59=[0,111,111,111,-1,111,111,111,111,111,0,-3,111,-1,111,111,-1,111,111,111,111,111,111,111,111,111,111,111,-4,111,111,111,111,-1,111,-1,111,111,111,111,111,-10,111,111,111,111,111,111,111,111,111,111,111,111,111,-1,111],
sm60=[0,112,112,112,-1,112,112,112,112,112,0,-3,112,-1,112,112,-1,112,112,112,112,112,112,112,112,112,112,112,-4,112,112,112,112,-1,112,-1,112,112,112,112,112,-10,112,112,112,112,112,112,112,112,112,112,112,112,112,-1,112],
sm61=[0,113,-3,0,-4,0,-11,113,113,113,113,113,113,113,113,-9,113,-1,113,113,113,113],
sm62=[0,-4,0,-4,0,-28,114],
sm63=[0,-4,0,-4,0,-28,115],
sm64=[0,116,89,-2,0,-4,0,-11,116,116,116,116,116,116,116,116,-4,117,118,119,120,-1,116,-1,116,116,116,116,-11,90,91,92,93,94,95,96,97,98,99],
sm65=[0,-4,0,-4,0,-55,121],
sm66=[0,-4,0,-4,0,-56,122],
sm67=[0,123,-3,0,-4,0,-11,123,123,123,123,123,123,123,123,-9,123,-1,123,123,123,123,123,-10,90,91,92,93,94,95,96,97,98,99],
sm68=[0,124,-3,0,-4,0,-11,124,124,124,124,124,124,124,124,-9,124,-1,124,124,124,124,124],
sm69=[0,125,-3,0,-4,0,-11,125,125,125,125,125,125,125,125,-9,125,-1,125,125,125,125,125,-6,126,127,128,-1,125,125,125,125,125,125,125,125,125,125],
sm70=[0,129,-3,0,-4,0,-11,129,129,129,129,129,129,129,129,-9,129,-1,129,129,129,129,129],
sm71=[0,130,-3,0,-4,0,-11,130,130,130,130,130,130,130,130,-9,130,-1,130,130,130,130,130],
sm72=[0,131,-3,0,-4,0,-11,131,131,131,131,131,131,131,131,-9,131,-1,131,131,131,131,131],
sm73=[0,132,-3,0,-4,0,-11,132,132,132,132,132,132,132,132,-9,132,-1,132,132,132,132,132],
sm74=[0,133,-3,0,-4,0,-11,133,133,133,133,133,133,133,133,-9,133,-1,133,133,133,133,133,-10,90,91,92,93,94,95,96,97,98,99],
sm75=[0,134,-3,0,-4,0,-11,134,134,134,134,134,134,134,134,-9,134,-1,134,134,134,134,134],
sm76=[0,135,-3,0,-4,0,-11,135,135,135,135,135,135,135,135,-9,135,-1,135,135,135,135,135,-10,90,91,92,93,94,95,96,97,98,99],
sm77=[0,136,-3,0,-4,0,-11,136,136,136,136,136,136,136,136,-9,136,-1,136,136,136,136,136],
sm78=[0,-4,0,-4,0,-29,57,-5,43,44,45,46,47,48],
sm79=[0,116,89,-2,0,-4,0,-34,116,-10,90,91,92,93,94,95,96,97,98,99],
sm80=[0,137,-3,0,-4,0,-28,137,-1,137,137,137,137],
sm81=[0,138,-3,0,-4,0,-11,138,138,138,138,-13,138,-1,138,138,138,138],
sm82=[0,139,-3,0,-4,0,-11,139,139,139,139,139,139,139,139,-9,139,-1,139,139,139,139],
sm83=[0,140,-3,0,-4,0,-11,140,140,140,140,140,140,140,140,-9,140,-1,140,140,140,140,140,-10,90,91,92,93,94,95,96,97,98,99],
sm84=[0,141,-3,0,-4,0,-11,141,141,141,141,141,141,141,141,-9,141,-1,141,141,141,141,141],
sm85=[0,-1,142,142,-1,0,142,142,142,142,0,-3,142,-53,142],
sm86=[0,-4,0,-4,0,-23,143],
sm87=[0,144,-3,0,-4,0,-11,144,144,144,144,144,144,144,144,-9,144,-1,144,144,144,144],
sm88=[0,145,-3,0,-4,0,-11,145,145,145,145,145,145,145,145,-9,145,-1,145,145,145,145,145],
sm89=[0,146,-3,0,-4,0,-11,146,146,146,146,146,146,146,146,-9,146,-1,146,146,146,146,146,-10,146,146,146,146,146,146,146,146,146,146],
sm90=[0,-1,147,-2,0,-4,0],
sm91=[0,-1,148,-2,0,-4,0],
sm92=[0,149,-3,0,-4,0,-11,149,149,149,149,149,149,149,149,-9,149,-1,149,149,149,149,149],
sm93=[0,150,-3,0,-4,0,-11,150,150,150,150,150,150,150,150,-9,150,-1,150,150,150,150,150],
sm94=[0,151,-3,0,-4,0,-34,151],
sm95=[0,152,-3,0,-4,0,-11,152,152,152,152,152,152,152,152,-9,152,-1,152,152,152,152],
sm96=[0,153,-3,0,-4,0,-11,153,153,153,153,153,153,153,153,-9,153,-1,153,153,153,153,153],
sm97=[0,-1,154,154,-1,0,154,154,154,154,0,-3,154,-53,154],
sm98=[0,155,-3,0,-4,0,-11,155,155,155,155,155,155,155,155,-9,155,-1,155,155,155,155,155,-10,155,155,155,155,155,155,155,155,155,155],

    // Symbol Lookup map
    lu = new Map([[1,1],[2,2],[4,3],[8,4],[16,5],[32,6],[64,7],[128,8],[256,9],[512,10],[3,11],[264,11],[200,13],[201,14],["/",15],["?",16],[":",17],["f",18],["filter",19],["FILTER",20],["&&",21],["AND",22],["And",23],["and",24],["||",25],["OR",26],["Or",27],["or",28],["NOT",29],["Not",30],["not",31],["!",32],["is",33],["=",34],["equals",35],["that",36],["(",37],[")",38],["#",39],["|",40],["s",41],["sort",42],["SORT",43],[",",44],["created",45],["CREATED",46],["modifier",47],["MODIFIED",48],["size",49],["SIZE",50],["to",51],["TO",52],["-",53],[null,5],["DEC",55],["dec",56],["decending",57],["DECENDING",58],["down",59],["ASC",60],["asc",61],["ascending",62],["ASCENDING",63],["up",64],["\"",65],["'",66],["*",67],["\\",69]]),

    //Reverse Symbol Lookup map
    rlu = new Map([[1,1],[2,2],[3,4],[4,8],[5,16],[6,32],[7,64],[8,128],[9,256],[10,512],[11,3],[11,264],[13,200],[14,201],[15,"/"],[16,"?"],[17,":"],[18,"f"],[19,"filter"],[20,"FILTER"],[21,"&&"],[22,"AND"],[23,"And"],[24,"and"],[25,"||"],[26,"OR"],[27,"Or"],[28,"or"],[29,"NOT"],[30,"Not"],[31,"not"],[32,"!"],[33,"is"],[34,"="],[35,"equals"],[36,"that"],[37,"("],[38,")"],[39,"#"],[40,"|"],[41,"s"],[42,"sort"],[43,"SORT"],[44,","],[45,"created"],[46,"CREATED"],[47,"modifier"],[48,"MODIFIED"],[49,"size"],[50,"SIZE"],[51,"to"],[52,"TO"],[53,"-"],[5,null],[55,"DEC"],[56,"dec"],[57,"decending"],[58,"DECENDING"],[59,"down"],[60,"ASC"],[61,"asc"],[62,"ascending"],[63,"ASCENDING"],[64,"up"],[65,"\""],[66,"'"],[67,"*"],[69,"\\"]]),

    // States 
    state = [sm0,
sm1,
sm2,
sm3,
sm4,
sm5,
sm6,
sm7,
sm8,
sm9,
sm10,
sm11,
sm11,
sm12,
sm13,
sm14,
sm14,
sm14,
sm14,
sm14,
sm14,
sm15,
sm16,
sm17,
sm18,
sm19,
sm20,
sm21,
sm22,
sm23,
sm24,
sm25,
sm26,
sm27,
sm28,
sm29,
sm30,
sm31,
sm32,
sm33,
sm34,
sm35,
sm35,
sm35,
sm36,
sm37,
sm38,
sm39,
sm40,
sm41,
sm41,
sm41,
sm41,
sm42,
sm43,
sm44,
sm45,
sm45,
sm45,
sm46,
sm47,
sm47,
sm47,
sm47,
sm48,
sm49,
sm49,
sm50,
sm51,
sm51,
sm52,
sm53,
sm53,
sm54,
sm54,
sm54,
sm54,
sm55,
sm56,
sm45,
sm57,
sm57,
sm57,
sm58,
sm59,
sm60,
sm42,
sm42,
sm42,
sm42,
sm42,
sm42,
sm42,
sm42,
sm61,
sm61,
sm61,
sm61,
sm62,
sm63,
sm64,
sm65,
sm66,
sm67,
sm68,
sm69,
sm70,
sm71,
sm72,
sm72,
sm72,
sm72,
sm72,
sm73,
sm73,
sm73,
sm73,
sm73,
sm74,
sm75,
sm76,
sm77,
sm78,
sm79,
sm80,
sm80,
sm80,
sm80,
sm81,
sm81,
sm81,
sm81,
sm82,
sm45,
sm83,
sm84,
sm85,
sm85,
sm85,
sm86,
sm87,
sm87,
sm88,
sm89,
sm90,
sm91,
sm91,
sm91,
sm92,
sm93,
sm94,
sm95,
sm96,
sm97,
sm98],

/************ Functions *************/

    max = Math.max, min = Math.min,

    //Error Functions
    e = (tk,r,o,l,p)=>{if(l.END)l.throw("Unexpected end of input");else if(l.ty & (264)) l.throw(`Unexpected space character within input "${p.slice(l)}" `) ; else l.throw(`Unexpected token ${l.tx}" `)}, 
    eh = [e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e,
e],

    //Empty Function
    nf = ()=>-1, 

    //Environment Functions
    
redv = (ret, fn, plen, ln, t, e, o, l, s) => {        ln = max(o.length - plen, 0);        const slice = o.slice(-plen);        o.length = ln + 1;        o[ln] = fn(slice, e, l, s, o, plen);        return ret;    },
rednv = (ret, Fn, plen, ln, t, e, o, l, s) => {        ln = max(o.length - plen, 0);        const slice = o.slice(-plen);        o.length = ln + 1;        o[ln] = new Fn(slice, e, l, s, o, plen);        return ret;    },
redn = (ret, plen, t, e, o) => {        if (plen > 0) {            let ln = max(o.length - plen, 0);            o[ln] = o[o.length - 1];            o.length = ln + 1;        }        return ret;    },
shftf = (ret, fn, t, e, o, l, s) => (fn(o, e, l, s), ret),
C20_query_body=function (sym){this.container = sym[0];this.filter = sym[1];this.sort = sym[2];},
C21_query_body=function (sym){this.container = null;this.filter = sym[0];this.sort = sym[1];},
C22_query_body=function (sym){this.container = sym[0];this.filter = null;this.sort = sym[1];},
C23_query_body=function (sym){this.container = sym[0];this.filter = sym[1];this.sort = null;},
C24_query_body=function (sym){this.container = null;this.filter = null;this.sort = sym[0];},
C25_query_body=function (sym){this.container = null;this.filter = sym[0];this.sort = null;},
C26_query_body=function (sym){this.container = sym[0];this.filter = null;this.sort = null;},
C27_query_body=function (){this.container = null;this.filter = null;this.sort = null;},
R30_container_identifier_list=sym=>(((sym[1] !== null) ? sym[0].push(sym[1]) : null,sym[0])),
R31_container_identifier_list=sym=>(sym[0] !== null) ? [sym[0]] : [],
C40_container_clause=function (sym){this.containers = sym[0];this.id = sym[1];if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
C41_container_clause=function (sym){this.containers = null;this.id = sym[0];if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
C42_container_clause=function (sym){this.containers = sym[0];this.id = null;if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
C43_container_clause=function (){this.containers = null;this.id = null;if(this.id)if(this.id.ids.length == 1 && this.id.ids[0] == "*"){if(!this.containers)this.containers = [];this.containers.push(this.id);this.id = null;}},
R50_container_identifier=sym=>sym[0],
R70_filter_clause=sym=>sym[1],
R71_filter_clause=()=>null,
C90_and_expression=function (sym){this.type = "AND";this.left = sym[0];this.right = sym[2];},
C100_or_expression=function (sym){this.type = "OR";this.left = sym[0];this.right = sym[2];},
C110_not_expression=function (sym){this.type = "NOT";this.left = sym[1];},
C130_wrapped_expression=function (sym){this.type = "MATCH";this.value = sym[0];},
C131_wrapped_expression=function (sym){this.type = "TAGEQ";this.tag = sym[1];this.val = sym[3];},
R150_sort_parameter_list=sym=>(((sym[1] !== null) ? sym[0].push(sym[2]) : null,sym[0])),
C190_created_expression=function (sym){this.type = "CREATED";this.val = sym[1];this.order = sym[2] || 1;},
C191_created_expression=function (sym){this.type = "CREATED";this.val = null;this.order = sym[1] || 1;},
C192_created_expression=function (sym){this.type = "CREATED";this.val = sym[1];this.order = 1;},
C193_created_expression=function (){this.type = "CREATED";this.val = null;this.order = 1;},
C210_modified_expression=function (sym){this.type = "MODIFIED";this.val = sym[1];this.order = sym[2] || 1;},
C211_modified_expression=function (sym){this.type = "MODIFIED";this.val = null;this.order = sym[1] || 1;},
C212_modified_expression=function (sym){this.type = "MODIFIED";this.val = sym[1];this.order = 1;},
C213_modified_expression=function (){this.type = "MODIFIED";this.val = null;this.order = 1;},
C230_size_expression=function (sym){this.type = "SIZE";this.val = sym[1];this.order = sym[2] || 1;},
C231_size_expression=function (sym){this.type = "SIZE";this.val = null;this.order = sym[1] || 1;},
C232_size_expression=function (sym){this.type = "SIZE";this.val = sym[1];this.order = 1;},
C233_size_expression=function (){this.type = "SIZE";this.val = null;this.order = 1;},
C240_tag_expression=function (sym){this.type = "TAG";this.tag = sym[1];this.val = sym[2];this.order = sym[3] || 1;},
C241_tag_expression=function (sym){this.type = "TAG";this.tag = sym[1];this.val = null;this.order = sym[2] || 1;},
C242_tag_expression=function (sym){this.type = "TAG";this.tag = sym[1];this.val = sym[2];this.order = 1;},
C243_tag_expression=function (sym){this.type = "TAG";this.tag = sym[1];this.val = null;this.order = 1;},
R270_length_expression=sym=>[sym[0],sym[1]],
R271_length_expression=sym=>[sym[0]],
R300_order=()=>-1,
R301_order=()=>1,
C330_identifier=function (sym){this.ids = sym[0];},
R350_string_data_val_list=sym=>sym[0] + sym[1],
R351_string_data_val_list=sym=>sym[0] + "",
R360_string_data=sym=>[sym[0],...sym[1]].join("").trim(),
R361_string_data=sym=>[sym[0]].join("").trim(),
R400_string_symbols=sym=>parseFloat(sym[0]),

    //Sparse Map Lookup
    lsm = (index, map) => {    if (map[0] == 0xFFFFFFFF) return map[index + 1];    for (let i = 1, ind = 0, l = map.length, n = 0; i < l && ind <= index; i++) {        if (ind !== index) {            if ((n = map[i]) > -1) ind++;            else ind += -n;        } else return map[i];    }    return -1;},

    //State Action Functions
    state_funct = [(...v)=>(redn(2051,0,...v)),
e=>86,
e=>62,
e=>82,
e=>78,
e=>74,
e=>70,
e=>66,
e=>94,
e=>98,
e=>102,
e=>106,
e=>114,
e=>118,
e=>122,
e=>126,
e=>54,
(...v)=>redn(5,1,...v),
(...v)=>redn(1031,1,...v),
(...v)=>rednv(2055,C26_query_body,1,0,...v),
(...v)=>rednv(2055,C25_query_body,1,0,...v),
(...v)=>rednv(2055,C24_query_body,1,0,...v),
(...v)=>rednv(4103,C42_container_clause,1,0,...v),
(...v)=>rednv(4103,C41_container_clause,1,0,...v),
e=>150,
(...v)=>redv(3079,R31_container_identifier_list,1,0,...v),
(...v)=>rednv(33799,C330_identifier,1,0,...v),
(...v)=>redv(32775,R31_container_identifier_list,1,0,...v),
(...v)=>redn(34823,1,...v),
(...v)=>redn(37895,1,...v),
(...v)=>redv(36871,R361_string_data,1,0,...v),
e=>174,
e=>178,
(...v)=>redn(40967,1,...v),
(...v)=>redv(40967,R400_string_symbols,1,0,...v),
(...v)=>redv(7175,R71_filter_clause,1,0,...v),
e=>198,
e=>202,
e=>206,
e=>210,
e=>214,
e=>226,
e=>262,
e=>266,
e=>274,
e=>278,
e=>286,
e=>290,
e=>230,
e=>234,
(...v)=>redn(6151,1,...v),
e=>294,
e=>298,
e=>302,
e=>306,
(...v)=>redv(16391,R71_filter_clause,1,0,...v),
e=>318,
(...v)=>redn(14343,1,...v),
e=>322,
e=>326,
e=>330,
(...v)=>rednv(2059,C23_query_body,2,0,...v),
(...v)=>rednv(2059,C22_query_body,2,0,...v),
(...v)=>rednv(2059,C21_query_body,2,0,...v),
(...v)=>rednv(4107,C40_container_clause,2,0,...v),
(...v)=>redv(3083,R30_container_identifier_list,2,0,...v),
(...v)=>redv(5131,R50_container_identifier,2,0,...v),
(...v)=>redv(32779,R30_container_identifier_list,2,0,...v),
(...v)=>redv(36875,R360_string_data,2,0,...v),
(...v)=>redv(35847,R351_string_data_val_list,1,0,...v),
(...v)=>redn(38919,1,...v),
(...v)=>redv(7179,R70_filter_clause,2,0,...v),
(...v)=>redn(9223,1,...v),
e=>346,
e=>350,
e=>354,
e=>358,
(...v)=>redn(10247,1,...v),
e=>362,
e=>366,
e=>370,
e=>374,
(...v)=>redn(11271,1,...v),
(...v)=>rednv(13319,C130_wrapped_expression,1,0,...v),
(...v)=>redn(13319,1,...v),
(...v)=>redn(31751,1,...v),
(...v)=>redn(17415,1,...v),
(...v)=>rednv(19463,C193_created_expression,1,0,...v),
e=>422,
e=>434,
e=>438,
e=>442,
e=>446,
e=>450,
e=>454,
e=>458,
e=>462,
e=>466,
e=>470,
(...v)=>redn(18439,1,...v),
(...v)=>rednv(21511,C213_modified_expression,1,0,...v),
(...v)=>redn(20487,1,...v),
(...v)=>rednv(23559,C233_size_expression,1,0,...v),
(...v)=>redn(22535,1,...v),
(...v)=>redn(6155,2,...v),
(...v)=>redv(16395,R70_filter_clause,2,0,...v),
e=>490,
(...v)=>redv(15367,R31_container_identifier_list,1,0,...v),
(...v)=>redn(14347,2,...v),
(...v)=>rednv(2063,C20_query_body,3,0,...v),
(...v)=>redv(35851,R350_string_data_val_list,2,0,...v),
(...v)=>redv(39947,R70_filter_clause,2,0,...v),
(...v)=>rednv(11275,C110_not_expression,2,0,...v),
e=>530,
(...v)=>redn(8199,1,...v),
(...v)=>rednv(24587,C243_tag_expression,2,0,...v),
e=>546,
e=>550,
e=>554,
e=>558,
e=>562,
e=>566,
(...v)=>rednv(19467,C192_created_expression,2,0,...v),
(...v)=>rednv(19467,C191_created_expression,2,0,...v),
(...v)=>redv(27655,R271_length_expression,1,0,...v),
e=>582,
e=>586,
e=>590,
(...v)=>redv(30727,R300_order,1,0,...v),
(...v)=>redv(30727,R301_order,1,0,...v),
(...v)=>redn(28679,1,...v),
(...v)=>redn(29703,1,...v),
(...v)=>rednv(21515,C212_modified_expression,2,0,...v),
(...v)=>rednv(21515,C211_modified_expression,2,0,...v),
(...v)=>rednv(23563,C232_size_expression,2,0,...v),
(...v)=>rednv(23563,C231_size_expression,2,0,...v),
(...v)=>rednv(9231,C90_and_expression,3,0,...v),
(...v)=>rednv(10255,C100_or_expression,3,0,...v),
(...v)=>redv(13327,R70_filter_clause,3,0,...v),
(...v)=>rednv(24591,C242_tag_expression,3,0,...v),
(...v)=>rednv(24591,C241_tag_expression,3,0,...v),
(...v)=>redn(12295,1,...v),
e=>614,
(...v)=>redv(31759,R70_filter_clause,3,0,...v),
(...v)=>rednv(19471,C190_created_expression,3,0,...v),
(...v)=>redv(27659,R270_length_expression,2,0,...v),
e=>618,
(...v)=>redn(25607,1,...v),
(...v)=>rednv(21519,C210_modified_expression,3,0,...v),
(...v)=>rednv(23567,C230_size_expression,3,0,...v),
(...v)=>redv(15375,R150_sort_parameter_list,3,0,...v),
(...v)=>rednv(13331,C131_wrapped_expression,4,0,...v),
(...v)=>rednv(24595,C240_tag_expression,4,0,...v),
(...v)=>redn(12299,2,...v),
(...v)=>redv(26635,R70_filter_clause,2,0,...v)],

    //Goto Lookup Functions
    goto = [v=>lsm(v,gt0),
nf,
nf,
v=>lsm(v,gt1),
v=>lsm(v,gt2),
nf,
v=>lsm(v,gt3),
nf,
nf,
v=>lsm(v,gt4),
nf,
nf,
nf,
nf,
v=>lsm(v,gt5),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt6),
nf,
nf,
nf,
nf,
v=>lsm(v,gt7),
nf,
nf,
nf,
nf,
v=>lsm(v,gt8),
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt9),
nf,
nf,
nf,
nf,
v=>lsm(v,gt10),
nf,
nf,
nf,
nf,
v=>lsm(v,gt11),
v=>lsm(v,gt12),
v=>lsm(v,gt13),
v=>lsm(v,gt14),
v=>lsm(v,gt15),
nf,
nf,
v=>lsm(v,gt16),
v=>lsm(v,gt17),
v=>lsm(v,gt18),
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt19),
nf,
nf,
v=>lsm(v,gt20),
nf,
nf,
v=>lsm(v,gt21),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt22),
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt23),
v=>lsm(v,gt24),
v=>lsm(v,gt25),
v=>lsm(v,gt26),
v=>lsm(v,gt27),
v=>lsm(v,gt28),
v=>lsm(v,gt29),
v=>lsm(v,gt30),
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt31),
nf,
nf,
v=>lsm(v,gt32),
nf,
v=>lsm(v,gt33),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt34),
nf,
v=>lsm(v,gt35),
nf,
v=>lsm(v,gt36),
v=>lsm(v,gt37),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
v=>lsm(v,gt38),
v=>lsm(v,gt39),
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf,
nf];

function getToken(l, SYM_LU) {
    if (l.END) return 0; /*$eof*/

    switch (l.ty) {
        case 2:
            //*
            if (SYM_LU.has(l.tx)) return 14;
            /*/
                console.log(l.tx, SYM_LU.has(l.tx), SYM_LU.get(l.tx))
                if (SYM_LU.has(l.tx)) return SYM_LU.get(l.tx);
            //*/
            return 2;
        case 1:
            return 1;
        case 4:
            return 3;
        case 256:
            return 9;
        case 8:
            return 4;
        case 512:
            return 10;
        default:
            return SYM_LU.get(l.tx) || SYM_LU.get(l.ty);
    }
}

/************ Parser *************/

function parser(l, e = {}) {

    fn = e.functions;

    l.IWS = false;
    l.PARSE_STRING = true;

    if (symbols.length > 0) {
        symbols.forEach(s => { l.addSymbol(s) });
        l.tl = 0;
        l.next();
    }

    const recovery_chain = [];

    const o = [],
        ss = [0, 0];

    let time = 1000000,
        RECOVERING = 100,
        RESTARTED = true,
        tk = getToken(l, lu),
        p = l.copy(),
        sp = 1,
        len = 0,
        reduceStack = (e.reduceStack = []),
        ROOT = 10000,
        off = 0;

    outer:

        while (time-- > 0) {

            const fn = lsm(tk, state[ss[sp]]) || 0;

            let r,
                gt = -1;

            if (fn == 0) {
                /*Ignore the token*/
                tk = getToken(l.next(), lu);
                continue;
            }

            if (fn > 0) {
                r = state_funct[fn - 1](tk, e, o, l, ss[sp - 1]);
            } else {

                if (tk == 14) {
                    tk = lu.get(l.tx);
                    continue;
                }

                if (l.ty == 8 && l.tl > 1) {
                    // Make sure that special tokens are not getting in the way
                    l.tl = 0;
                    // This will skip the generation of a custom symbol
                    l.next(l, false);

                    if (l.tl == 1)
                        continue;
                }

                if (RECOVERING > 1 && !l.END) {

                    if (tk !== lu.get(l.ty)) {
                        tk = lu.get(l.ty);
                        continue;
                    }

                    if (tk !== 13) {
                        tk = 13;
                        RECOVERING = 1;
                        continue;
                    }
                }

                tk = getToken(l, lu);

                const recovery_token = eh[ss[sp]](tk, e, o, l, p, ss[sp], (lex) => getToken(lex, lu));

                if (RECOVERING > 0 && recovery_token >= 0) {
                    RECOVERING = -1; /* To prevent infinite recursion */
                    tk = recovery_token;
                    l.tl = 0; /*reset current token */
                    continue;
                }
            }

            switch (r & 3) {
                case 0:
                    /* ERROR */

                    if (tk == "$eof")
                        l.throw("Unexpected end of input");

                    l.throw(`Unexpected token [${RECOVERING ? l.next().tx : l.tx}]`);
                    return [null];

                case 1:
                    /* ACCEPT */
                    break outer;

                case 2:

                    /*SHIFT */
                    o.push(l.tx);
                    ss.push(off, r >> 2);
                    sp += 2;
                    l.next();
                    off = l.off;
                    tk = getToken(l, lu);
                    RECOVERING++;
                    break;

                case 3:
                    /* REDUCE */
                    RESTARTED = true;

                    len = (r & 0x3FC) >> 1;

                    ss.length -= len;
                    sp -= len;
                    gt = goto[ss[sp]](r >> 10);

                    if (gt < 0)
                        l.throw("Invalid state reached!");

                    if (reduceStack.length > 0) {
                        let i = reduceStack.length - 1;
                        while (i > -1) {
                            let item = reduceStack[i--];

                            if (item.index == sp) {
                                item.action(output)
                            } else if (item.index > sp) {
                                reduceStack.length--;
                            } else {
                                break;
                            }
                        }
                    }

                    ss.push(off, gt);
                    sp += 2;
                    break;
            }
        }
    return o[0];
}; export default parser;