# Graze Note Query Language

@SYMBOL && ||

@IGNORE θws θnl 

# Special Search / Filter Types

↦ tagnode       { this.type ="TAG";         this.id=$$sym2;     this.val=$$sym3;        this.order=$sym4 || 1 }
↦ creatednode   { this.type ="CREATED";     this.val=$$sym2;    this.order=$sym3 || 1   }
↦ modifiednode  { this.type ="MODIFIED";    this.val=$$sym2;    this.order=$sym3 || 1   }
↦ sizenode      { this.type ="SIZE";        this.val=$$sym2;    this.order=$sym3 || 1   }

↦ andnode       { this.type ="AND";         this.left=$$sym1;   this.right=$$sym3       }
↦ ornode        { this.type ="OR";          this.left=$$sym1;   this.right=$$sym3       }
↦ notnode       { this.type ="NOT";         this.left=$$sym2;   }
↦ matchnode     { this.type ="MATCH";       this.value=$$sym1   }

<> GNQL → start

<> start → query_body

<> query_body → container_clause? filter_clause? sort_clause?           ↦c { this.container = $$sym1 ; this.filter=$$sym2; this.sort=$$sym3 }

## Container Clause

<> container_clause →  \/? container_identifier(*) identifier?          ↦c {
                                                                            this.containers = [{ids:[""]},...$sym2];  this.id = $$sym3; if(this.id){
                                                                                if(this.id.ids.length == 1 && this.id.ids[0] == "*"){
                                                                                    if(!this.containers)
                                                                                        this.containers = [];
                                                                                    this.containers.push(this.id);
                                                                                    this.id = null;
                                                                                }
                                                                            }
                                                                        }

<> container_identifier → identifier \/                                 ↦r { $$sym1 }

## Filter Clause ############################################################################################

<> filter_clause → 
    ( \? :? │ τf :? │ τfilter :? │ τFilter │ τFILTER :? )  
        and_expression?                                                 ↦r { $$sym2 }

<> statement → and_expression           

<> and_expression → or_expression
    │ or_expression && and_expression                                   ↦c=>andnode
    │ or_expression τAND and_expression                                 ↦c=>andnode
    │ or_expression τAnd and_expression                                 ↦c=>andnode
    │ or_expression τand and_expression                                 ↦c=>andnode

<> or_expression → not_expression
    │ not_expression || or_expression                                   ↦c=>ornode
    │ not_expression τOR or_expression                                  ↦c=>ornode
    │ not_expression τOr or_expression                                  ↦c=>ornode
    │ not_expression τor or_expression                                  ↦c=>ornode

<> not_expression → wrapped_expression
    │ τNOT wrapped_expression                                           ↦c=>notnode
    │ τNot wrapped_expression                                           ↦c=>notnode
    │ τnot wrapped_expression                                           ↦c=>notnode
    │ \!   wrapped_expression                                           ↦c=>notnode

<> wrapped_expression → \( statement \)                                 ↦r {$$sym2}
    │ sentence                                                          ↦c=>matchnode
    │ identifier                                                        ↦c=>matchnode
    │ stetement 

## Sort Clause ############################################################################################

<> sort_clause → 
    ( \| │ τs :? │ τsort :? │ τSORT :? │ τSort :? ) stetement(*,)  ↦r { $$sym2 }

<> stetement → created_statement
    │ modified_statement
    │ size_statement
    │ tag_statement

<> created_statement → 

    (τcreated │ τCREATED) comparison_expression? order?              ↦c=>creatednode

<> modified_statement → 

    (τmodifier │ τMODIFIED) comparison_expression? order?            ↦c=>modifiednode

<> size_statement → 

    (τsize │ τSIZE) comparison_expression order?                    ↦c=>sizenode

<> tag_statement →  

    \# identifier comparison_expression? order?                     ↦c=>tagnode
    
<> comparison_expression → 

      (τis │ τequals │ = │ τthat τis)  θnum                         ↦r { { type: "EQUALS_QUANTITATIVE", val : parseFloat($sym2)} }
    │ (τis │ τequals │ = │ τthat τis)  identifier                   ↦r { { type: "EQUALS_QUALITATIVE", val : $sym2 } }
    │ (τis τgreater τthan? │ > │ τgreater) θnum                     ↦r { { type: "GREATERTHAN", val : parseFloat($sym2) } }
    │ (τis τless τthan? │ < │ τlesser) θnum                         ↦r { { type: "LESSTHAN", val : parseFloat($sym2) } }
    │ τis? range_expression                                         ↦r { $sym2 }
    │ τis? date_expression                                          ↦r { $sym2 }

<> range_expression → (τfrom) θnum 
    ( (τto │ - │ τTO │ τTo │ τthrough ) θnum ↦r { $sym2 })?         ↦r { { type: "RANGE", val : [$sym2, $sym3].map(parseFloat).sort((a,b)=>a<b ? -1:1) } }

<> date_expression → (τon │ τdate) (string_data │ θnum) 
    ( (τto │ -│ τTO │ τTo ) (string_data │ θnum) ↦r { $sym2 })?     ↦r { { type: "DATE",  val : [$sym2,$sym3].map(d=>new Date(d).valueOf()).sort((a,b)=>a<b ? -1:1) } }

<>order → (τDES │ τdes │ τdescending │ τDESCENDING │ τdown │ >)         ↦r {-1}
    │ (τASC │ τasc │ τascending │ τASCENDING │ τup │ <)             ↦r {1}

<> identifier → identifier_part(+)                                  ↦c {this.ids = $$sym1 }

<> identifier_part → wild_card                                              
    │ string_data

<> sentence → \" string_data \"                                     ↦r {$$sym2}
    │ \' string_data \'                                             ↦r {$$sym2}

<> string_data → string_symbols string_data_val(*")                 ↦r { [$sym1, ...$sym2].join("").trim() }

<> wild_card → \*

<> string_data_val → string_symbols 
    │ escaped_value
    │ θws

<> escaped_value → \\ string_symbols                                ↦r {$$sym2}

<> string_symbols → θany │ θsym │ θop │ θid


