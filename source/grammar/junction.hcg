# Junction are hints in plaintext files that instruct Graze on how to incorrupt data from that file into ruminate. 

@IGNORE θws θnl 

@SYMBOL (( ))

↦ junction 	{ this.start=env.start; this.end = lex.off; this.query=$$sym2; this.action=$$sym4; }

<> ReduceTree → items					

<> items → string_data(+) 		↦r { [] }
	│ data_insert_point 		↦r { [$sym1] }
	│ items string_data(+) 		↦r {$sym1 }
	│ items data_insert_point 	↦r { $$sym1.push($$sym2), $$sym1 }					

<> data_insert_point → \(( ↦ {env.start = lex.off} data_string \)) ( \[  data_string(*,) \] ↦r{ $sym2 } )?	↦c=>junction

<> data_string → ( string_data_val(*") )

<> string_data → string_data_val

<> string_data_val → string_symbols 
	│ escaped_value
	│ θws 
	│ θnl 

<> escaped_value → \\ string_symbols 		↦r {$$sym2}

<> string_symbols → θid │ θany │ θsym │ θop │ θcb │ θob 
