
import {
    ParserFramework,
    KernelParserCore,
    fillByteBufferWithUTF8FromString
} from "/@candlelib/hydrocarbon";


const {
    token_production,
    init_table,
    KernelStateIterator,
    run,
    compare
} = KernelParserCore;

const token_sequence_lookup = new Uint8Array([
    96, 96, 96, 96, 35, 35, 35, 35, 35, 35, 35, 64, 91, 93, 42, 95, 62, 41
]);

const token_lookup = new Uint32Array([
    128, 130, 0, 512, 940, 642, 300, 4, 32, 256, 8, 942, 7602606, 7602476, 262144, 524288, 16252846,
    16252334, 640, 7603118, 1048576, 2097152, 4194304, 15991214, 24380334, 17825824, 16777216,
    1048608, 24379822
]);

const states_buffer = new Uint32Array([
    0, 4026531840, 2164260864, 4026531841, 2147483648, 603979791, 603979785, 603980058,
    0, 1073742088, 805306368, 0, 1073742352, 805306368, 0, 3087007775, 2768240649, 0, 1, 2147483648,
    2583691271, 65538, 65537, 4026531840, 2147483649, 603979791, 603979788, 603980066, 0,
    4026531840, 0, 2499805184, 0, 65537, 4026531840, 0, 0, 2583691273, 196608, 65539, 2147483652,
    603979831, 0, 2147483652, 603979823, 0, 0, 2852192259, 196608, 1, 2147483657, 268435456,
    805306372, 0, 4026531840, 1880096769, 131072, 1, 268435457, 805306372, 0, 2852192260,
    0, 1, 2147483655, 2147483653, 268435456, 603979847, 0, 4026531840, 0, 2852126723, 262144,
    131076, 2147483656, 2147483653, 2147483650, 2147483651, 603979861, 603979864, 0, 1073745672,
    805306373, 0, 0, 1073745424, 805306373, 0, 2852126736, 393216, 131076, 2147500040, 2147491845,
    2147483650, 2147508227, 2147483654, 603979940, 603979888, 0, 2147483654, 603979940,
    603979898, 0, 2147483654, 603979940, 603979908, 0, 2147483654, 603979940, 603979918,
    0, 4026531840, 2852192260, 458752, 1, 2147483650, 268435456, 1073745928, 805306374, 0,
    4026531840, 0, 2852192260, 524288, 1, 2147483653, 268435456, 1073745928, 805306374, 0,
    4026531840, 0, 2852192260, 589824, 1, 2147483656, 268435456, 1073745928, 805306374, 0,
    4026531840, 0, 2852192260, 655360, 1, 2147483651, 268435456, 1073745928, 805306374, 0,
    4026531840, 0, 2852126724, 720896, 131076, 2147483656, 2147483653, 2147483650, 2147483651,
    268435456, 1073746192, 805306374, 0, 4026531840, 3087007918, 2499805190, 0, 65539, 4026531840,
    0, 0, 603979940, 603979928, 0, 2499805190, 0, 65537, 4026531840, 0, 0, 1073742088, 805306375,
    0, 2852126723, 786432, 196616, 2147483656, 2147483666, 2143289346, 2147483651, 2147483668,
    2155872261, 2147483670, 2147483669, 603979975, 603979994, 0, 4026531840, 0, 1073742352,
    805306375, 0, 3087007956, 2499805191, 0, 65539, 4026531840, 0, 0, 603979978, 603979959,
    0, 2499805191, 0, 65537, 4026531840, 0, 0, 2852126742, 851968, 196616, 2147483656, 2147520530,
    2143289346, 2147483651, 2147495956, 2155872261, 2147512342, 2147504149, 2147483656,
    2147483658, 603980028, 603980143, 603980471, 0, 2147483656, 603980028, 603980146, 0,
    2147483656, 603980028, 603980218, 0, 2147483656, 603980028, 603980228, 0, 2147483656,
    603980028, 603980030, 0, 4026531840, 805306376, 0, 2852192260, 917504, 1, 2147483666,
    2147483657, 268435456, 603980040, 0, 4026531840, 0, 2852192259, 524288, 1, 2147483653,
    268435456, 603980048, 0, 4026531840, 2852192260, 983040, 1, 2147483667, 268435456, 1073746456,
    805306377, 0, 4026531840, 0, 2852192259, 0, 1, 2147483655, 2147483649, 603980066, 0, 4026531840,
    2785017860, 1048576, 262164, 2147483664, 2210398209, 2210398210, 2147483651, 2147483668,
    2202009605, 2147483670, 2197815303, 2147483656, 2147487753, 2147483658, 2147483659,
    2147483660, 2147483661, 2147483662, 2147483663, 2147483665, 2147483666, 2147483669,
    2147483671, 603980094, 0, 603980131, 0, 4026531840, 2852192261, 1114112, 1, 2147483655,
    2147483651, 268435456, 603980104, 603980302, 0, 4026531840, 2852126729, 786432, 196618,
    2147483656, 2147495937, 2172649474, 2147483651, 2147483668, 2164260869, 2147483670,
    2147495943, 2147483666, 2147483669, 2147483655, 603980128, 603979978, 603979956, 603979994,
    0, 1073742856, 805306369, 0, 4026531840, 0, 1073742608, 805306369, 0, 2852192261, 1179648,
    1, 2147483655, 2147483650, 268435456, 603980141, 603980156, 0, 4026531840, 805306369,
    0, 1073746696, 805306378, 0, 2852192261, 1310720, 1, 2147483668, 2147483659, 268435456,
    1073746952, 805306379, 0, 4026531840, 2852192259, 196608, 1, 2147483657, 268435456, 603980164,
    0, 4026531840, 2852126731, 262144, 131077, 2147483656, 2147483653, 2147483650, 2151677955,
    2147493895, 2147483658, 603980186, 603980143, 603980471, 0, 2147483662, 603980209, 603980244,
    603980238, 603979837, 0, 603980215, 603979813, 0, 2852126726, 1179648, 1, 2147483655,
    2147483662, 603980200, 603980244, 603980238, 603979837, 0, 603980206, 603979813, 0, 0,
    603980203, 603979813, 0, 1073743144, 805306370, 0, 1073743648, 805306370, 0, 603980212,
    603979813, 0, 1073743392, 805306370, 0, 1073743896, 805306370, 0, 2852192261, 1376256,
    1, 2147483669, 2147483660, 268435456, 1073747208, 805306380, 0, 4026531840, 2852192261,
    1441792, 1, 2147483670, 2147483661, 268435456, 1073747464, 805306381, 0, 4026531840,
    1073742088, 805306382, 0, 1073742352, 805306382, 0, 3087008228, 2768240650, 0, 1, 2147483662,
    2583691271, 1179650, 65537, 4026531840, 2147483653, 268435456, 603980244, 603980241,
    603979847, 0, 4026531840, 2499805198, 0, 65537, 4026531840, 0, 0, 2852192260, 589824, 1,
    2147483656, 268435456, 1073742096, 805306384, 0, 4026531840, 0, 3087008264, 2768240653,
    0, 1, 2147483664, 2583691287, 1507330, 65537, 4026531840, 268435456, 2583691272, 589826,
    65537, 4026531840, 268435456, 1073747736, 3221225489, 0, 4026531840, 0, 2499805200, 0,
    65537, 4026531840, 0, 0, 2852126726, 1114112, 262163, 2147491856, 2181046273, 2206212098,
    2147491843, 2147483668, 2197819397, 2147491862, 2193629191, 2147491848, 2147491857,
    2147491850, 2147491851, 2147491852, 2147491853, 2147491854, 2147491855, 2147491858,
    2147491861, 2147491863, 603980332, 0, 603980396, 0, 603980410, 0, 4026531840, 0, 2785017860,
    786432, 196618, 2147483656, 2147487745, 2172653570, 2147487747, 2147487764, 2164264965,
    2147487766, 2147487751, 2147487762, 2147487765, 603980350, 0, 603980380, 0, 4026531840,
    2785017858, 1245184, 196618, 2147483656, 2147483649, 2172649474, 2147483651, 2147483668,
    2164260869, 2147483670, 2147483655, 2147483666, 2147483669, 603980368, 0, 603980377,
    0, 0, 2147483663, 603980374, 603980673, 603980595, 603980563, 0, 1073744400, 805306371,
    0, 1073745160, 805306371, 0, 2785017858, 786432, 196617, 2147483666, 2147483649, 2139095042,
    2147483651, 2147483668, 2160066565, 2147483670, 2147483655, 2147483669, 603980377,
    0, 4026531840, 0, 2516582424, 1572864, 65538, 603980377, 0, 603980404, 0, 0, 2147483663,
    603980374, 603980673, 603980595, 603980563, 0, 2852126737, 1114112, 262161, 2147483664,
    2160095233, 2176872450, 2147512323, 2147483665, 2147512341, 2147512342, 2185261063,
    2147512328, 2147512338, 2147483658, 2147504139, 2147504140, 2147483661, 2147483662,
    2147483663, 2147491863, 268435456, 1073744144, 805306371, 0, 2147483664, 268435456,
    603980448, 603980276, 603980266, 0, 268435456, 1073744912, 805306371, 0, 1073745160,
    805306371, 0, 4026531840, 1073744656, 805306371, 0, 2852192260, 524288, 1, 2147483653,
    2147483667, 268435456, 603980461, 0, 4026531840, 0, 2852192260, 1703936, 1, 2147483672,
    268435456, 1073747984, 805306387, 0, 4026531840, 0, 2852126736, 393216, 131076, 2147500040,
    2147491845, 2147483650, 2147508227, 2147483665, 603980547, 603980495, 0, 2147483665,
    603980547, 603980505, 0, 2147483665, 603980547, 603980515, 0, 2147483665, 603980547,
    603980525, 0, 4026531840, 2852192260, 458752, 1, 2147483650, 268435456, 1073745928, 805306385,
    0, 4026531840, 0, 2852192260, 524288, 1, 2147483653, 268435456, 1073745928, 805306385,
    0, 4026531840, 0, 2852192260, 589824, 1, 2147483656, 268435456, 1073745928, 805306385,
    0, 4026531840, 0, 2852192260, 655360, 1, 2147483651, 268435456, 1073745928, 805306385,
    0, 4026531840, 0, 2852126724, 1245184, 131076, 2147483656, 2147483653, 2147483650, 2147483651,
    268435456, 1073746192, 805306385, 0, 4026531840, 3087008525, 2499805201, 0, 65539, 4026531840,
    0, 0, 603980547, 603980535, 0, 2499805201, 0, 65537, 4026531840, 0, 0, 2852126727, 1769472,
    65538, 2147483668, 2147489797, 2147483666, 603980577, 0, 2147483666, 603980585, 603980451,
    0, 4026531840, 0, 2852192259, 1310720, 1, 2147483668, 268435456, 603980585, 0, 4026531840,
    2852192260, 589824, 1, 2147483656, 268435456, 1073747984, 805306386, 0, 4026531840, 0,
    1073742088, 805306383, 0, 2852126724, 786432, 65538, 2147483668, 2147487749, 603980608,
    0, 603980662, 0, 4026531840, 2785017860, 786432, 196618, 2147483656, 2147487745, 2172653570,
    2147487747, 2147487764, 2164264965, 2147487766, 2147487751, 2147487762, 2147487765,
    603980626, 0, 603980648, 0, 4026531840, 2785017858, 1245184, 196618, 2147483656, 2147483649,
    2172649474, 2147483651, 2147483668, 2164260869, 2147483670, 2147483655, 2147483666,
    2147483669, 603980642, 0, 4026531840, 603980645, 603980563, 0, 1073742352, 805306383,
    0, 2785017857, 786432, 196617, 2147483666, 2147483649, 2139095042, 2147483651, 2147483668,
    2160066565, 2147483670, 2147483655, 2147483669, 4026531840, 4026531840, 2516582424,
    1572864, 65538, 4026531840, 0, 603980670, 0, 0, 603980645, 603980563, 0, 3087008651, 2499805199,
    0, 65539, 4026531840, 0, 0, 603980673, 603980598, 0, 2499805199, 0, 65537, 4026531840, 0,
    0
]);

function isTokenActive(token_id, row) {
    var index = (row) + (token_id >> 5);;
    var shift = 1 << (31 & (token_id));;
    return (token_lookup[index] & shift) != 0;
}

function scan_core(l, tk_row) {
    switch ((l.get_byte_at(l.byte_offset) & 127)) {
        case 35:
            {
                if (l.get_byte_at(l.byte_offset) == 35) {
                    if (l.get_byte_at(l.byte_offset + 1) == 35) {
                        if (l.get_byte_at(l.byte_offset + 2) == 35) {
                            if (l.get_byte_at(l.byte_offset + 3) == 35) {
                                if (l.get_byte_at(l.byte_offset + 4) == 35) {
                                    if (l.get_byte_at(l.byte_offset + 5) == 35) {
                                        if (l.get_byte_at(l.byte_offset + 6) == 35) {
                                            if (isTokenActive(11, tk_row)) {
                                                l.setToken(11, 7, 7);
                                                return;
                                            }
                                        } else if (isTokenActive(13, tk_row)) {
                                            l.setToken(13, 6, 6);
                                            return;
                                        }
                                    } else if (isTokenActive(14, tk_row)) {
                                        l.setToken(14, 5, 5);
                                        return;
                                    }
                                } else if (isTokenActive(15, tk_row)) {
                                    l.setToken(15, 4, 4);
                                    return;
                                }
                            } else if (isTokenActive(16, tk_row)) {
                                l.setToken(16, 3, 3);
                                return;
                            }
                        } else if (isTokenActive(17, tk_row)) {
                            l.setToken(17, 2, 2);
                            return;
                        }
                    } else if (isTokenActive(10, tk_row)) {
                        l.setToken(10, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 41:
            {
                if (l.get_byte_at(l.byte_offset) == 41) {
                    if (isTokenActive(24, tk_row)) {
                        l.setToken(24, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 42:
            {
                if (l.get_byte_at(l.byte_offset) == 42) {
                    if (isTokenActive(20, tk_row)) {
                        l.setToken(20, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 62:
            {
                if (l.get_byte_at(l.byte_offset) == 62) {
                    if (isTokenActive(23, tk_row)) {
                        l.setToken(23, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 64:
            {
                if (l.get_byte_at(l.byte_offset) == 64) {
                    if (isTokenActive(18, tk_row) && l.get_byte_at(l.byte_offset + 1) == 91) {
                        l.setToken(18, 2, 2);
                        return;
                    }
                }
            }
            break;
        case 93:
            {
                if (l.get_byte_at(l.byte_offset) == 93) {
                    if (isTokenActive(19, tk_row)) {
                        l.setToken(19, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 95:
            {
                if (l.get_byte_at(l.byte_offset) == 95) {
                    if (isTokenActive(21, tk_row)) {
                        l.setToken(21, 1, 1);
                        return;
                    }
                }
            }
            break;
        case 96:
            {
                if (l.get_byte_at(l.byte_offset) == 96) {
                    if (l.get_byte_at(l.byte_offset + 1) == 96) {
                        if (l.get_byte_at(l.byte_offset + 2) == 96) {
                            if (l.get_byte_at(l.byte_offset + 3) == 96) {
                                if (isTokenActive(12, tk_row)) {
                                    l.setToken(12, 4, 4);
                                    return;
                                }
                            } else if (isTokenActive(9, tk_row)) {
                                l.setToken(9, 3, 3);
                                return;
                            }
                        }
                    } else if (isTokenActive(22, tk_row)) {
                        l.setToken(22, 1, 1);
                        return;
                    }
                }
            }
            break;
        default:
            break;
    };
    if (isTokenActive(0, tk_row) && false) {
        l._type = 0;
        return;
    } else if (isTokenActive(8, tk_row) && l.isSP(true)) {
        l._type = 8;
        return;
    } else if (isTokenActive(3, tk_row) && l.isUniID()) {
        l._type = 3;
        return;
    } else if (isTokenActive(2, tk_row) && l.isSym(true)) {
        l._type = 2;
        return;
    } else if (isTokenActive(7, tk_row) && l.isNL()) {
        l._type = 7;
        return;
    } else if (isTokenActive(5, tk_row) && l.isNum()) {
        l._type = 5;
        return;
    }
}

function scan(l, token, skip) {
    if (((l._type) <= 0)) scan_core(l, token);;
    if ((skip > 0 && isTokenActive(l._type, skip))) {
        while ((isTokenActive(l._type, skip))) {
            l.next();
            scan_core(l, token);
        }
    }
}

const js_parser_pack = {

    init_table: () => {
        const table = new Uint8Array(382976);
        init_table(table);
        return table;
    },

    create_iterator: (data) => {
        return new KernelStateIterator(data);
    },

    recognize: (string, entry_index) => {

        const temp_buffer = new Uint8Array((string.length + 1) * 4);

        const actual_length = fillByteBufferWithUTF8FromString(string, temp_buffer, temp_buffer.length);

        const input_buffer = new Uint8Array(temp_buffer.buffer, 0, actual_length);

        let entry_pointer = 0;

        switch (entry_index) {

            case 0: default: entry_pointer = 67108868; break;
        }

        return run(
            states_buffer,
            input_buffer,
            input_buffer.length,
            entry_pointer,
            scan,
            false
        );
    }
};


const reduce_functions = [(_, s) => s[s.length - 1], (env, sym, pos) => ([sym[0]]) /*0*/,
(env, sym, pos) => ((sym[0].push(sym[1]), sym[0])) /*1*/,
(env, sym, pos) => (new env.SectionNode(sym[0][0], sym[0][1], [...sym[0].slice(2), ...sym[1]])) /*2*/,
(env, sym, pos) => (new env.SectionNode(sym[0][0], sym[0][1], [...sym[0].slice(2)])) /*3*/,
(env, sym, pos) => (new env.SectionNode("code-block", { data: sym[2] }, sym[3])) /*4*/,
(env, sym, pos) => (new env.SectionNode("code-block", {}, sym[2])) /*5*/,
(env, sym, pos) => (new env.SectionNode("code-block", { data: sym[2] })) /*6*/,
(env, sym, pos) => (new env.SectionNode("code-block", {})) /*7*/,
(env, sym, pos) => (["header", { level: sym[1].length }]) /*8*/,
(env, sym, pos) => (["bullet-header", { level: sym[1] }]) /*9*/,
(env, sym, pos) => (["quote", { level: sym[1] }]) /*10*/,
(env, sym, pos) => (["paragraph", null, ["text", { text: sym[1] || "" }]]) /*11*/,
(env, sym, pos) => (["paragraph", null]) /*12*/,
(env, sym, pos) => (["text", { text: sym[1] || "" }]) /*13*/,
(env, sym, pos) => (["text", { text: "" }]) /*14*/,
(env, sym, pos) => (sym[0] + "") /*15*/,
(env, sym, pos) => (sym[0] + sym[1]) /*16*/,
(env, sym, pos) => (["note-insertion", { query_id: sym[1] }]) /*17*/,
(env, sym, pos) => (["text", { text: sym[0] }]) /*18*/,
(env, sym, pos) => (["format-marker-A"]) /*19*/,
(env, sym, pos) => (["format-marker-B"]) /*20*/,
(env, sym, pos) => (["format-marker-C"]) /*21*/,
(env, sym, pos) => ((sym[0].push(sym[2]), sym[0])) /*22*/,
(env, sym, pos) => (sym[0]) /*23*/];

export default ParserFramework(
    reduce_functions,
    {
        note: 0,
    },
    js_parser_pack,

);

